[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"[![CI Status](https://github.com/AY2021S2-TIC4002-F18-2/tp2/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-TIC4002-F18-2/tp2/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"* This is **a project for TIC4002 students**."},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"* This project is based on the AddressBook-Level3 project created by the **[SE-EDU initiative](https://se-education.org)**."},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"* The project simulates a brownfield team project by using the existing AddressBook-Level3 codebase as a platform to develop **Employee Tracker**."},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"  * It is **written in OOP fashion**."},{"lineNumber":9,"author":{"gitId":"-"},"content":"  * It comes with a **reasonable level of user and developer documentation**."},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"* For the detailed documentation of this project, see the **[Employee Tracker Product Website](https://ay2021s2-tic4002-f18-2.github.io/tp2/)**."}],"authorContributionMap":{"e0260222":6,"-":4}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"mainClassName \u003d \u0027employeetracker.Main\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"run {"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"    enableAssertions \u003d true"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"}"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"    archiveName \u003d \u0027employeetracker.jar\u0027"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027"}],"authorContributionMap":{"e0260222":6,"-":70}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"### Chan Weizhong"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"\u003cimg src\u003d\"images/e0260222.png\" width\u003d\"200px\"\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"[[github](https://github.com/e0260222)]"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"[[portfolio](team/e0260222.md)]"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"* Role: Team Lead"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"### Lin Tong"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"\u003cimg src\u003d\"images/dgc5213.png\" width\u003d\"200px\"\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"[[github](http://github.com/dgc5213)]"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"[[portfolio](team/dgc5213.md)]"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"### Dai Wei"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"\u003cimg src\u003d\"images/daiweinus.png\" width\u003d\"200px\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"[[github](http://github.com/daiweinus)]"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"[[portfolio](team/daiweinus.md)]"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"### Chen Duo"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"\u003cimg src\u003d\"images/chenduo1412.png\" width\u003d\"200px\"\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"[[github](http://github.com/chenduo1412)]"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"[[portfolio](team/chenduo1412.md)]"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* Role: Developer"}],"authorContributionMap":{"e0260222":16,"-":26}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":"1. The command execution can affect the `Model` (e.g. adding a employee)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"e0260222"},"content":"Step 2. The user executes `delete 5` command to delete the 5th employee in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"e0260222"},"content":"Step 3. The user executes `add n/David …​` to add a new employee. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"e0260222"},"content":"Step 4. The user now decides that adding the employee was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"e0260222"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the employee being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"dgc5213"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":221,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":222,"author":{"gitId":"e0260222"},"content":"### Add feature"},{"lineNumber":223,"author":{"gitId":"e0260222"},"content":"#### Implementation"},{"lineNumber":224,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":225,"author":{"gitId":"e0260222"},"content":"The `add` command is implemented using the `AddCommand` class, which extends the `Command` class; and the `AddCommandParser` class, which implements the `Parser` class. Upon receiving a user command that has `add` as the first word, the following object interactions will occur, resulting in the instantiation of an `AddCommand` object:"},{"lineNumber":226,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":227,"author":{"gitId":"e0260222"},"content":"1. `MainWindow` object calls `LogicManager#execute(commandText)`, where `commandText` is the user\u0027s input string;"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"e0260222"},"content":"2. `LogicManager` object calls `EmployeeTrackerParser#parseCommand(commandText)` to parse the user command, where `commandText` is the user\u0027s input string;"},{"lineNumber":230,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":231,"author":{"gitId":"e0260222"},"content":"3. `EmployeeTrackerParser#parseCommand()` calls AddCommandParser#parse(arguments), where `arguments` are the parameters in `commandText` such as `n/NAME` and `s/SALARY`;"},{"lineNumber":232,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":233,"author":{"gitId":"e0260222"},"content":"4. AddCommandParser#parse() calls `AddCommand(employee)` to instantiate an `AddCommand` object, where `employee` is an `Employee` object that is constructed using `arguments`."},{"lineNumber":234,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":235,"author":{"gitId":"e0260222"},"content":"Next, the following object interactions will occur to save the new employee record to the `Model` object;"},{"lineNumber":236,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":237,"author":{"gitId":"e0260222"},"content":"1. `LogicManager` object calls `AddCommand#execute(model)`, where `model` is the `Model` object;"},{"lineNumber":238,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":239,"author":{"gitId":"e0260222"},"content":"2. `AddCommand#execute()` calls `Model#addEmployee(toAdd)` to add the new `employee`, where `toAdd` is the `Employee` object to be stored."},{"lineNumber":240,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":241,"author":{"gitId":"e0260222"},"content":"The following sequence diagram shows the object interactions when `LogicManager#execute(commandText)` is called:"},{"lineNumber":242,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":243,"author":{"gitId":"e0260222"},"content":"![Object Interactions for `add` Command](images/AddSequenceDiagram.png)"},{"lineNumber":244,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":245,"author":{"gitId":"e0260222"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `AddCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":246,"author":{"gitId":"e0260222"},"content":"\u003c/div\u003e"},{"lineNumber":247,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":248,"author":{"gitId":"e0260222"},"content":"The following activity diagram shows what happens when a user executes an add command:"},{"lineNumber":249,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":250,"author":{"gitId":"e0260222"},"content":"![Activity Diagram for `add` Command](images/AddActivityDiagram.png)"},{"lineNumber":251,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":252,"author":{"gitId":"dgc5213"},"content":"### Find feature"},{"lineNumber":253,"author":{"gitId":"dgc5213"},"content":"#### Implementation of find feature"},{"lineNumber":254,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":255,"author":{"gitId":"dgc5213"},"content":"The find operation is implemented using `FindCommand`, which extends `Command`."},{"lineNumber":256,"author":{"gitId":"dgc5213"},"content":"Upon receiving an input string that has `find` as the fist word, the `Employee Tracker` object will instantiate an `FindCommand` object with the `fullCommand` string, which is the input entered by the user."},{"lineNumber":257,"author":{"gitId":"dgc5213"},"content":"The user is flexible to find the keywords by name, by role."},{"lineNumber":258,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":259,"author":{"gitId":"dgc5213"},"content":"* `find n/ Alice`: find by name based on the keywords (e.g Alice)."},{"lineNumber":260,"author":{"gitId":"dgc5213"},"content":"* `find r/ Developer`: find by role based on the keywords (e.g Developer)."},{"lineNumber":261,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":262,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":263,"author":{"gitId":"dgc5213"},"content":"These operations are exposed in the `FindCommand()` class."},{"lineNumber":264,"author":{"gitId":"dgc5213"},"content":"* Step 1: The user executes the find command."},{"lineNumber":265,"author":{"gitId":"dgc5213"},"content":"* Step 2: The FindCommand() class will check with NameContainsKeywordsPredicate in Model to see if match the user instruction keywords."},{"lineNumber":266,"author":{"gitId":"dgc5213"},"content":"* Step 3: Then check the keywords one by one and return matched Employee records."},{"lineNumber":267,"author":{"gitId":"dgc5213"},"content":"* Step 4: Create command result and display the matched Employee records to the user."},{"lineNumber":268,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":269,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":270,"author":{"gitId":"dgc5213"},"content":"The following sequence diagram shows how the find operation works:"},{"lineNumber":271,"author":{"gitId":"dgc5213"},"content":"![SequenceDiagram_FindCommand](images/SequenceDiagram_FindCommand.png)"},{"lineNumber":272,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":273,"author":{"gitId":"dgc5213"},"content":"The following activity diagram summarizes what happens when a user executes a find command:"},{"lineNumber":274,"author":{"gitId":"dgc5213"},"content":"![ActivityDiagram_FindCommand](images/ActivityDiagram_FindCommand.png)"},{"lineNumber":275,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":276,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":277,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":278,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":279,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":280,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":287,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":288,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":289,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":290,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"e0260222"},"content":"**Target user profile**: This app is targeted towards small business owners who wish to keep track of employee data such as salary, role and days of leave taken."},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"e0260222"},"content":"**Value proposition**: This app shall allow users to consolidate employee data on a single platform. This increases their productivity because they no longer need to access multiple data sources to retrieve/update employee data."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"| Priority | As a …​                                 | I want to …​                 | So that I can…​                                                    |"},{"lineNumber":307,"author":{"gitId":"e0260222"},"content":"| -------- | ------------------------------------------ | ------------------------------- | --------------------------------------------------------------------- |"},{"lineNumber":308,"author":{"gitId":"e0260222"},"content":"| `* * *`  | new user                                   | access a user manual            | learn how to use the available features                               |"},{"lineNumber":309,"author":{"gitId":"e0260222"},"content":"| `* * *`  | user                                       | add an employee record          | keep track of the data of a particular employee                       |"},{"lineNumber":310,"author":{"gitId":"e0260222"},"content":"| `* *  `  | user                                       | edit an employee record         | modify an employee record without having to delete and readd          |"},{"lineNumber":311,"author":{"gitId":"e0260222"},"content":"| `* * *`  | user                                       | delete an employee record       | remove an employee record that I no longer need                       |"},{"lineNumber":312,"author":{"gitId":"e0260222"},"content":"| `* * *`  | user                                       | list all employee records       | view all my employees\u0027 information                                    |"},{"lineNumber":313,"author":{"gitId":"e0260222"},"content":"| `* *  `  | user                                       | clear all employee records      | start afresh with the app                                             |"},{"lineNumber":314,"author":{"gitId":"dgc5213"},"content":"| `* * *`  | user                                       | find an employee record by name | look at the particular employee\u0027s information                         |"},{"lineNumber":315,"author":{"gitId":"dgc5213"},"content":"| `* * *`  | user                                       | find employee records by role   | look at the information of the employees with this role                  |"},{"lineNumber":316,"author":{"gitId":"daiweinus"},"content":"| `* * *`  | user                                       | sort employee records by salary          | view the salary structure in my company                           |"},{"lineNumber":317,"author":{"gitId":"daiweinus"},"content":"| `* * *`  | user                                       | sort employee records by name            | view employee records in alphabetical order                       |"},{"lineNumber":318,"author":{"gitId":"daiweinus"},"content":"| `* * *`  | user                                       | sort employee records by date of joining | find the employees who stayed the shortest/longest in the company |"},{"lineNumber":319,"author":{"gitId":"daiweinus"},"content":"| `* * *`  | user                                       | sort employee records by date of birth   | find the youngest/oldest employees in the company                 |"},{"lineNumber":320,"author":{"gitId":"daiweinus"},"content":"| `* * *`  | user                                       | list all employee records      | view all my employees\u0027 information                                     |"},{"lineNumber":321,"author":{"gitId":"Chenduo1412"},"content":"| `* * *`  | user                                       | view summary statistics     | obtain a basic overview of my workforce                                   |"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"e0260222"},"content":"(For all use cases below, the **System** is the `Employee Tracker` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"e0260222"},"content":"**Use case: Add an employee record**"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":332,"author":{"gitId":"e0260222"},"content":"1. User enters new employee record."},{"lineNumber":333,"author":{"gitId":"e0260222"},"content":"2. Employee Tracker displays a success message together with the updated list of employee records.\u003cbr\u003e"},{"lineNumber":334,"author":{"gitId":"-"},"content":"   Use case ends."},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":337,"author":{"gitId":"e0260222"},"content":"* 1a. The command entered is in the wrong format."},{"lineNumber":338,"author":{"gitId":"e0260222"},"content":"    * 1a1. Employee Tracker shows an error message.\u003cbr\u003e"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"e0260222"},"content":"**Use case: Delete an employee record**"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"e0260222"},"content":"**MSS**"},{"lineNumber":344,"author":{"gitId":"e0260222"},"content":"1. User requests to list employee records."},{"lineNumber":345,"author":{"gitId":"e0260222"},"content":"2. Employee Tracker displays a list of all employee records."},{"lineNumber":346,"author":{"gitId":"e0260222"},"content":"3. User requests to delete a specific employee record in the list."},{"lineNumber":347,"author":{"gitId":"e0260222"},"content":"4. Employee Tracker deletes this employee record.\u003cbr\u003e"},{"lineNumber":348,"author":{"gitId":"-"},"content":"   Use case ends."},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"e0260222"},"content":"**Extensions**"},{"lineNumber":351,"author":{"gitId":"e0260222"},"content":"* 2a. The list is empty\u003cbr\u003e"},{"lineNumber":352,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":353,"author":{"gitId":"-"},"content":"  "},{"lineNumber":354,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":355,"author":{"gitId":"e0260222"},"content":"    * 3a1. Employee Tracker shows an error message.\u003cbr\u003e"},{"lineNumber":356,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"dgc5213"},"content":"**Use case: Find an employee record by name**"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"dgc5213"},"content":"**MSS**"},{"lineNumber":361,"author":{"gitId":"dgc5213"},"content":"1. User requests to find employee records by name."},{"lineNumber":362,"author":{"gitId":"dgc5213"},"content":"2. Employee Tracker displays a success message together with the matched employee records.\u003cbr\u003e"},{"lineNumber":363,"author":{"gitId":"dgc5213"},"content":"   Use case ends."},{"lineNumber":364,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":365,"author":{"gitId":"dgc5213"},"content":"**Extensions**"},{"lineNumber":366,"author":{"gitId":"dgc5213"},"content":"* 4a. The command entered is in the wrong format."},{"lineNumber":367,"author":{"gitId":"dgc5213"},"content":"    * 4a1. Employee Tracker shows an error message.\u003cbr\u003e"},{"lineNumber":368,"author":{"gitId":"dgc5213"},"content":"      Use case ends."},{"lineNumber":369,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":370,"author":{"gitId":"dgc5213"},"content":"**Use case: Find employee records by role**"},{"lineNumber":371,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":372,"author":{"gitId":"dgc5213"},"content":"**MSS**"},{"lineNumber":373,"author":{"gitId":"dgc5213"},"content":"1. User requests to find employee records by role."},{"lineNumber":374,"author":{"gitId":"dgc5213"},"content":"2. Employee Tracker displays a success message together with the matched employee records.\u003cbr\u003e"},{"lineNumber":375,"author":{"gitId":"dgc5213"},"content":"   Use case ends."},{"lineNumber":376,"author":{"gitId":"-"},"content":""},{"lineNumber":377,"author":{"gitId":"dgc5213"},"content":"**Extensions**"},{"lineNumber":378,"author":{"gitId":"dgc5213"},"content":"* 5a. The command entered is in the wrong format."},{"lineNumber":379,"author":{"gitId":"dgc5213"},"content":"    * 5a1. Employee Tracker shows an error message.\u003cbr\u003e"},{"lineNumber":380,"author":{"gitId":"dgc5213"},"content":"      Use case ends."},{"lineNumber":381,"author":{"gitId":"dgc5213"},"content":"      "},{"lineNumber":382,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":385,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"e0260222"},"content":"1. The app should work on any mainstream OS with Java `11` or above installed."},{"lineNumber":388,"author":{"gitId":"e0260222"},"content":"2. The response time for each command should not exceed `3` seconds."},{"lineNumber":389,"author":{"gitId":"e0260222"},"content":"3. A user with average typing speed should be able to enter any one command within `12` seconds."},{"lineNumber":390,"author":{"gitId":"e0260222"},"content":"4. After using each command for at least `5` times, a user with no cognitive disability should be able to"},{"lineNumber":391,"author":{"gitId":"e0260222"},"content":"   use all the app features without having to reference the user guide."},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":396,"author":{"gitId":"-"},"content":""},{"lineNumber":397,"author":{"gitId":"e0260222"},"content":"* *Mainstream OS* - Windows 7, Windows 10, Linux, Unix, OS-X"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":406,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":411,"author":{"gitId":"-"},"content":""},{"lineNumber":412,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":415,"author":{"gitId":"-"},"content":""},{"lineNumber":416,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":419,"author":{"gitId":"-"},"content":""},{"lineNumber":420,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":423,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":426,"author":{"gitId":"-"},"content":""},{"lineNumber":427,"author":{"gitId":"e0260222"},"content":"### Deleting a employee"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"e0260222"},"content":"1. Deleting a employee while all employees are being shown"},{"lineNumber":430,"author":{"gitId":"-"},"content":""},{"lineNumber":431,"author":{"gitId":"e0260222"},"content":"   1. Prerequisites: List all employees using the `list` command. Multiple employees in the list."},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":434,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":435,"author":{"gitId":"-"},"content":""},{"lineNumber":436,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":437,"author":{"gitId":"e0260222"},"content":"      Expected: No employee is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":438,"author":{"gitId":"-"},"content":""},{"lineNumber":439,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":440,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":441,"author":{"gitId":"-"},"content":""},{"lineNumber":442,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":443,"author":{"gitId":"-"},"content":""},{"lineNumber":444,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":445,"author":{"gitId":"-"},"content":""},{"lineNumber":446,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":447,"author":{"gitId":"-"},"content":""},{"lineNumber":448,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":449,"author":{"gitId":"-"},"content":""},{"lineNumber":450,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"daiweinus":5,"dgc5213":59,"e0260222":65,"Chenduo1412":1,"-":320}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"The Employee Tracker allows small business owners to keep track of their employees\u0027 data using a single platform instead of having to deal with multiple data management tools."},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"Through a simple and intuitive graphical user interface, business owners can record and view their employees\u0027 information."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":10,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"2. Download the latest `employeetracker.jar` [here](https://github.com/AY2021S2-TIC4002-F18-2/tp2/releases)."},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"3. Copy `employeetracker.jar` to the folder you want to use as the home folder for Employee Tracker."},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"4. Navigate to the home folder for Employee Tracker on your CLI program."},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"5. Launch Employee Tracker by running the command `java -jar employeetracker.jar`."},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"6. Type the command in the CLI program and press `Enter` to execute it."},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"   \u003cbr\u003eSome example commands you can try:"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    - `add n/Rachel Lee r/Designer p/91648917 e/rachel@f18tech.com.sg a/BLK 730 Woodlands Road #15-150 b/1988-01-02 j/2020-09-01 s/8000 t/Founder t/l33tCoder`: Adds an employee record."},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    - `list`: Lists all employee records."},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    - `delete 3`: Deletes the 3rd employee record shown in the current list."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    - `sort n`: Sorts all employee records based on `Name` in alphabetical order."},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    - `find n/Rachel` : Finds all employee records with `Rachel` in its `Name` field"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"   - `find r/Developer` : Finds all employee records with `Developer` in its `Role` field"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"7. Refer to **Features** below for details of each command."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"  E.g. The parameter `INDEX` in the command `delete INDEX`."},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"* Parameters in square brackets are optional."},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"  E.g. The parameter `[s/SALARY]` in `edit INDEX [n/NAME] [r/ROLE] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [b/DATE_OF_BIRTH] [j/DATE_OF_JOINING] [s/SALARY] [t/TAG]…`"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"  "},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"* Parameters with `…` after them can be included multiple times\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"  E.g. The parameter `KEYWORD` in the command `find TYPE/KEYWORD…`."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"  E.g. The command `add` requires a few parameters such as `n/NAME`, `e/EMAIL` and `r/ROLE`. Placing these parameters in any order is acceptable."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"* If a parameter is expected only once in the command but is specified multiple times, only the last occurrence of this parameter will be taken.\u003cbr\u003e"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"  E.g. If `n/John Lam n/John Lee` is specified in the `add` command, only `n/John Lee` will be taken."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"* Unneeded parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"  E.g. The command `help 123` will be interpreted as `help`."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"Shows the URL of the user manual."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"### Adding an employee record: `add`"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"Adds an employee record to the Employee Tracker."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"Format: `add n/NAME r/ROLE p/PHONE_NUMBER e/EMAIL a/ADDRESS b/DATE_OF_BIRTH j/DATE_OF_JOINING s/SALARY [t/TAG]…`"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"* `PHONE_NUMBER` must be a number that is at least 3-digit long. E.g. `98714821`, `67617361`."},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"* `EMAIL` must be in local-part@domain format. E.g. `andy@f18tech.com.sg`."},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"* `DATE_OF_BIRTH` must be in yyyy-MM-dd format. E.g. `1990-12-25`."},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"* `DATE_OF_JOINING` must be in yyyy-MM-dd format. E.g. `2020-09-1`."},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"* `SALARY` must be a positive integer. E.g. `4000`, `3000`."},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"* `TAG` must be alphanumeric. E.g. `Founder`, `l33tCoder`."},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"Example of usage:"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"* `add n/Rachel Lee r/Designer p/91648917 e/rachel@f18tech.com.sg a/BLK 730 Woodlands Road #15-150 b/1988-01-02 j/2020-09-01 s/8000 t/Founder t/l33tCoder`"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"Chenduo1412"},"content":"### Listing all employee records：`list`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"Lists all the employee records in the Employee Tracker."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"### Editing an employee record：`edit`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"Edits an employee record in the Employee Tracker."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"Format: `edit INDEX [n/NAME] [r/ROLE] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [b/DATE_OF_BIRTH] [j/DATE_OF_JOINING] [s/SALARY] [t/TAG]…`"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"* `INDEX` refers to the index number shown in the list of employee records."},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"* `INDEX` must a positive integer. E.g. `1`, `2`, `3`…"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"* At least one of the optional parameters must be provided."},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"* The employee record indicated by the index number will be edited."},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":"* `PHONE_NUMBER` must be a number that is at least 3-digit long. E.g. `98714821`, `67617361`."},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"* `EMAIL` must be in local-part@domain format. E.g. `andy@f18tech.com.sg`."},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"* `DATE_OF_BIRTH` must be in yyyy-MM-dd format. E.g. `1990-12-25`."},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"* `DATE_OF_JOINING` must be in yyyy-MM-dd format. E.g. `2020-09-1`."},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"* `SALARY` must be a positive integer. E.g. `4000`, `3000`."},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":"* `TAG` must be alphanumeric. E.g. `Founder`, `l33tCoder`."},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":"* All existing tags for this employee record will be removed if `TAG` is not provided in the `[t/TAG]` parameter. E.g. `edit 1 t/`."},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"* Editing tags will remove all existing tags for this employee record. E.g. If an employee record 1 has tags `Mentor` and `l33tCoder`, `edit 1 t/WiseGuy` will result in this employee record only having the tag `WiseGuy`."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"Example of usage:"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"* `edit 1 p/91821748 s/8000 t/Mentor t/l33tCoder`"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"### Deleting an employee record : `delete`"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":"Deletes the specified employee from the Employee Tracker."},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"* `INDEX` refers to the index number shown in the list of employee records."},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"* `INDEX` must a positive integer. E.g. `1`, `2`, `3`…"},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"* The employee record indicated by the index number will be deleted."},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":"Examples of usage:"},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"* `list` followed by `delete 2` deletes the 2nd employee record shown in the list of all employee records."},{"lineNumber":118,"author":{"gitId":"dgc5213"},"content":"* `find n/Rachel` followed by `delete 1` deletes the 1st employee record in the list generated by the `find` command."},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"daiweinus"},"content":"### Sorting employee records: `sort`"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"daiweinus"},"content":"Sorts the list of employee records in the Employee Tracker."},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"daiweinus"},"content":"Format: `sort TYPE`"},{"lineNumber":125,"author":{"gitId":"daiweinus"},"content":"* `TYPE` must be the letter n, s, j or b."},{"lineNumber":126,"author":{"gitId":"daiweinus"},"content":"* If `TYPE` is n, the employee records will be sorted based on name in alphabetical order."},{"lineNumber":127,"author":{"gitId":"daiweinus"},"content":"* If `TYPE` is s, the employee records will be sorted based on salary in increasing order."},{"lineNumber":128,"author":{"gitId":"daiweinus"},"content":"* If `TYPE` is j, the employee records will be sorted based on date of joining from the earliest date to the latest date."},{"lineNumber":129,"author":{"gitId":"daiweinus"},"content":"* If `TYPE` is b, the employee records will be sorted based on date of birth from the earliest date to the latest date."},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"daiweinus"},"content":"Example of usage:"},{"lineNumber":132,"author":{"gitId":"daiweinus"},"content":"* `sort d`"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"dgc5213"},"content":"### Finding employee records : `find`"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"dgc5213"},"content":"Finds employee records that have any of the given keywords in their name/role."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"dgc5213"},"content":"Format: `find TYPE/KEYWORD…`"},{"lineNumber":139,"author":{"gitId":"dgc5213"},"content":"* `TYPE` must be the letter `n` or `r`."},{"lineNumber":140,"author":{"gitId":"dgc5213"},"content":"* If `TYPE` is `n`, the search will be based on name."},{"lineNumber":141,"author":{"gitId":"dgc5213"},"content":"* If `TYPE` is `r`, the search will be based on role."},{"lineNumber":142,"author":{"gitId":"dgc5213"},"content":"* The search is case-insensitive. E.g. keyword `john` will match `John`."},{"lineNumber":143,"author":{"gitId":"dgc5213"},"content":"* Only exact words will be matched. E.g. keyword `Jon` will not match `John`."},{"lineNumber":144,"author":{"gitId":"dgc5213"},"content":"* Employee records matching at least one keyword will be returned. E.g. keywords `John Wong` will return `John Lam` and `Bernice Wong`."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"dgc5213"},"content":"Examples of usage:"},{"lineNumber":147,"author":{"gitId":"dgc5213"},"content":"* `find n/John Bernice Andy` "},{"lineNumber":148,"author":{"gitId":"dgc5213"},"content":"* `find r/Developer`"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"e0260222"},"content":"### Clearing all employee records : `clear`"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"e0260222"},"content":"Clears all employee records from the Employee Tracker."},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"Chenduo1412"},"content":"### Viewing summary statistics : `stats`"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"Chenduo1412"},"content":"Shows summary statistics of employees."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"Chenduo1412"},"content":"Format: `stats`"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"e0260222"},"content":"Exits the Employee Tracker app."},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"e0260222"},"content":"There is no save command because any change to the data in the Employee Tracker will be automatically saved."},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"e0260222"},"content":"**Q**:"},{"lineNumber":177,"author":{"gitId":"e0260222"},"content":"How do I transfer my data to another computer?"},{"lineNumber":178,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":179,"author":{"gitId":"e0260222"},"content":"**A**:"},{"lineNumber":180,"author":{"gitId":"e0260222"},"content":"Go to the Employee Tracker\u0027s root folder in the current computer."},{"lineNumber":181,"author":{"gitId":"e0260222"},"content":"Copy the data folder and paste it into the Employee Tracker\u0027s root folder in the new computer."},{"lineNumber":182,"author":{"gitId":"e0260222"},"content":"Click `Yes` if the system prompts you for confirmation of overwriting."},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":189,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":190,"author":{"gitId":"-"},"content":"**Help** | `help`"},{"lineNumber":191,"author":{"gitId":"dgc5213"},"content":"**Add** | `add n/NAME e/EMAIL r/ROLE a/ADDRESS c/CONTACT_NUMBER s/SALARY d/DATE_OF_EMPLOYMENT b/DATE_OF_BIRTH` \u003cbr\u003e E.g. `add n/Rachel Lee e/rachel@f18solutions.com.sg r/Designer a/BLK 730 Woodlands Road #15-150 c/91648917 d/2020-09-01 b/1988-01-02`"},{"lineNumber":192,"author":{"gitId":"Chenduo1412"},"content":"**List** | `list`"},{"lineNumber":193,"author":{"gitId":"e0260222"},"content":"**Edit** | `edit INDEX [n/NAME] [r/ROLE] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [b/DATE_OF_BIRTH] [j/DATE_OF_JOINING] [s/SALARY] [t/TAG]…` \u003cbr\u003e E.g. `edit 1 p/91821748 s/8000 t/Mentor t/l33tCoder`"},{"lineNumber":194,"author":{"gitId":"daiweinus"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e E.g. `delete 2`"},{"lineNumber":195,"author":{"gitId":"daiweinus"},"content":"**Sort** | `sort TYPE` \u003cbr\u003e E.g. `sort j`"},{"lineNumber":196,"author":{"gitId":"daiweinus"},"content":"**Find** | `find TYPE/KEYWORD` \u003cbr\u003e E.g. `find n/John Bernice Andy`,`find r/Developer`"},{"lineNumber":197,"author":{"gitId":"e0260222"},"content":"**Clear** | `clear`"}],"authorContributionMap":{"daiweinus":13,"dgc5213":15,"e0260222":75,"Chenduo1412":5,"-":89}},{"path":"docs/diagrams/AddActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":"start"},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":":User executes add command;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"if () then ([Valid add command format])"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"    if () then ([Employee name does not exist in model])"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"        :Adds employee to model;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"        :Displays information of newly-added employee;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"    else ([Else])"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"        :Displays \"Duplicated Employee\" error message;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    endif"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"else ([Else])"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"    :Displays \"Invalid Command\" error message;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"endif"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"stop"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"@enduml"}],"authorContributionMap":{"e0260222":15}},{"path":"docs/diagrams/AddSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"box Logic LOGIC_COLOR_T1"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"participant \":EmployeeTrackerParser\" as EmployeeTrackerParser LOGIC_COLOR"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"participant \":AddCommandParser\" as AddCommandParser LOGIC_COLOR"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"participant \"a:AddCommand\" as AddCommand LOGIC_COLOR"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"end box"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"box Model MODEL_COLOR_T1"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"participant \":Model\" as Model MODEL_COLOR"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"end box"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"[-\u003e LogicManager : execute(\"add n/John Doe…\")"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"activate LogicManager"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"LogicManager -\u003e EmployeeTrackerParser : parseCommand(\"add n/John Doe…\")"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"activate EmployeeTrackerParser"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"create AddCommandParser"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"EmployeeTrackerParser -\u003e AddCommandParser"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"activate AddCommandParser"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"AddCommandParser --\u003e EmployeeTrackerParser"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"deactivate AddCommandParser"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"EmployeeTrackerParser -\u003e AddCommandParser : parse(\"n/John Doe…\")"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"activate AddCommandParser"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"create AddCommand"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"AddCommandParser -\u003e AddCommand"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"activate AddCommand"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"AddCommand --\u003e AddCommandParser : a"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"deactivate AddCommand"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"AddCommandParser --\u003e EmployeeTrackerParser : a"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"deactivate AddCommandParser"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar."},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"AddCommandParser -[hidden]-\u003e EmployeeTrackerParser"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"destroy AddCommandParser"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"EmployeeTrackerParser --\u003e LogicManager : a"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"deactivate EmployeeTrackerParser"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"LogicManager -\u003e AddCommand : execute()"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"activate AddCommand"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"AddCommand -\u003e Model : addEmployee(toAdd)"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"activate Model"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"Model --\u003e AddCommand"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"deactivate Model"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"create CommandResult"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"AddCommand -\u003e CommandResult"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"activate CommandResult"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"CommandResult --\u003e AddCommand"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"deactivate CommandResult"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"AddCommand --\u003e LogicManager : result"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"deactivate AddCommand"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"[\u003c--LogicManager"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"deactivate LogicManager"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"@enduml"}],"authorContributionMap":{"e0260222":69}},{"path":"src/main/java/employeetracker/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.util.FileUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":61}},{"path":"src/main/java/employeetracker/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application."},{"lineNumber":7,"author":{"gitId":"-"},"content":" *"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted."},{"lineNumber":17,"author":{"gitId":"-"},"content":" *"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":24}},{"path":"src/main/java/employeetracker/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.Config;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.Version;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.util.ConfigUtil;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.util.StringUtil;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.Logic;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.LogicManager;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.EmployeeTracker;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ModelManager;"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyEmployeeTracker;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyUserPrefs;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.UserPrefs;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.util.SampleDataUtil;"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"import employeetracker.storage.EmployeeTrackerStorage;"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"import employeetracker.storage.JsonEmployeeTrackerStorage;"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"import employeetracker.storage.JsonUserPrefsStorage;"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"import employeetracker.storage.Storage;"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"import employeetracker.storage.StorageManager;"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"import employeetracker.storage.UserPrefsStorage;"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"import employeetracker.ui.Ui;"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"import employeetracker.ui.UiManager;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Employee Tracker ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"        EmployeeTrackerStorage employeeTrackerStorage \u003d"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"                new JsonEmployeeTrackerStorage(userPrefs.getEmployeeTrackerFilePath());"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"        storage \u003d new StorageManager(employeeTrackerStorage, userPrefsStorage);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s Employee Tracker and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"     * The data from the sample Employee Tracker will be used instead if {@code storage}\u0027s Employee Tracker is not"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"     * found, or an empty Employee Tracker will be used instead if errors occur when reading {@code storage}\u0027s"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"     * Employee Tracker."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"        Optional\u003cReadOnlyEmployeeTracker\u003e addressBookOptional;"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"        ReadOnlyEmployeeTracker initialData;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"            addressBookOptional \u003d storage.readEmployeeTracker();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"                logger.info(\"Data file not found. Will be starting with a sample EmployeeTracker\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleEmployeeTracker);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty EmployeeTracker\");"},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"            initialData \u003d new EmployeeTracker();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty EmployeeTracker\");"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"            initialData \u003d new EmployeeTracker();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":125,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":153,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":156,"author":{"gitId":"e0260222"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty EmployeeTracker\");"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":172,"author":{"gitId":"e0260222"},"content":"        logger.info(\"Starting EmployeeTracker \" + MainApp.VERSION);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":178,"author":{"gitId":"e0260222"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Employee Tracker ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":44,"-":141}},{"path":"src/main/java/employeetracker/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":62}},{"path":"src/main/java/employeetracker/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings."},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well."},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":78}},{"path":"src/main/java/employeetracker/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    private static final String LOG_FILE \u003d \"employeetracker.log\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":110}},{"path":"src/main/java/employeetracker/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX \u003d \"The employee index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_EMPLOYEES_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":10}},{"path":"src/main/java/employeetracker/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":115}},{"path":"src/main/java/employeetracker/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.core.index;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index."},{"lineNumber":5,"author":{"gitId":"-"},"content":" *"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":53}},{"path":"src/main/java/employeetracker/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":10}},{"path":"src/main/java/employeetracker/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":20}},{"path":"src/main/java/employeetracker/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import employeetracker.MainApp;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":40}},{"path":"src/main/java/employeetracker/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":34}},{"path":"src/main/java/employeetracker/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.Config;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":20}},{"path":"src/main/java/employeetracker/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":82}},{"path":"src/main/java/employeetracker/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.LogsCenter;"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.DataConversionException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":140}},{"path":"src/main/java/employeetracker/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":66}},{"path":"src/main/java/employeetracker/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyEmployeeTracker;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * Returns the EmployeeTracker."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     * @see employeetracker.model.Model#getEmployeeTracker()"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    ReadOnlyEmployeeTracker getEmployeeTracker();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"    /** Returns an unmodifiable view of the filtered list of employees */"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    ObservableList\u003cEmployee\u003e getFilteredEmployeeList();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     * Returns the user prefs\u0027 Employee Tracker file path."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"    Path getEmployeeTrackerFilePath();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":14,"-":36}},{"path":"src/main/java/employeetracker/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.Command;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.EmployeeTrackerParser;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyEmployeeTracker;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import employeetracker.storage.Storage;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    private final EmployeeTrackerParser employeeTrackerParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        employeeTrackerParser \u003d new EmployeeTrackerParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        Command command \u003d employeeTrackerParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"            storage.saveEmployeeTracker(model.getEmployeeTracker());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"    public ReadOnlyEmployeeTracker getEmployeeTracker() {"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"        return model.getEmployeeTracker();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"    public ObservableList\u003cEmployee\u003e getFilteredEmployeeList() {"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"        return model.getFilteredEmployeeList();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"    public Path getEmployeeTrackerFilePath() {"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"        return model.getEmployeeTrackerFilePath();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":22,"-":59}},{"path":"src/main/java/employeetracker/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_DATE_OF_JOINING;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_SALARY;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":" * Adds a employee to the Employee Tracker."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an employee to Employee Tracker. \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"            + PREFIX_ROLE + \"ROLE \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"            + PREFIX_DATE_OF_BIRTH + \"DATE_OF_BIRTH \""},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"            + PREFIX_DATE_OF_JOINING + \"DATE_OF_JOINING \""},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"            + PREFIX_SALARY + \"SALARY \""},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"            + PREFIX_ROLE + \"Developer \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"            + PREFIX_DATE_OF_BIRTH + \"1990-12-25 \""},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"            + PREFIX_DATE_OF_JOINING + \"2020-07-01 \""},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"            + PREFIX_SALARY + \"3000 \""},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"            + PREFIX_TAG + \"Founder \""},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"            + PREFIX_TAG + \"l33tCoder\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New employee added: %1$s\";"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_DUPLICATE_EMPLOYEE \u003d \"This employee already exists in Employee Tracker\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"    private final Employee toAdd;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"     * Creates an AddCommand to add the specified {@code Employee}"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"    public AddCommand(Employee employee) {"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        requireNonNull(employee);"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"        toAdd \u003d employee;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"        if (model.hasEmployee(toAdd)) {"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"        model.addEmployee(toAdd);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":36,"-":43}},{"path":"src/main/java/employeetracker/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.EmployeeTracker;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" * Clears the Employee Tracker."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Employee Tracker has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"        model.setEmployeeTracker(new EmployeeTracker());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":6,"-":17}},{"path":"src/main/java/employeetracker/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.exceptions.CommandException;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":17}},{"path":"src/main/java/employeetracker/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and other fields set to their default value."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return feedbackToUser;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return showHelp;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isExit() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return exit;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":70}},{"path":"src/main/java/employeetracker/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":" * Deletes a employee identified using it\u0027s displayed index from the Employee Tracker."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"            + \": Deletes the employee identified by the index number used in the displayed employee list.\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_DELETE_EMPLOYEE_SUCCESS \u003d \"Deleted Employee: %1$s\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredEmployeeList();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        Employee employeeToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        model.deleteEmployee(employeeToDelete);"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_EMPLOYEE_SUCCESS, employeeToDelete));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":14,"-":39}},{"path":"src/main/java/employeetracker/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_DATE_OF_JOINING;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_SALARY;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import static employeetracker.model.Model.PREDICATE_SHOW_ALL_EMPLOYEES;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.Messages;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.util.CollectionUtil;"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Address;"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfBirth;"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfJoining;"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Email;"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Name;"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Phone;"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Role;"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Salary;"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.tag.Tag;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":" * Edits the details of an existing employee in the Employee Tracker."},{"lineNumber":39,"author":{"gitId":"-"},"content":" */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the employee identified \""},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"            + \"by the index number used in the displayed employee list. \""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"            + \"[\" + PREFIX_ROLE + \"ROLE] \""},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":52,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"            + \"[\" + PREFIX_DATE_OF_BIRTH + \"DATE_OF_BIRTH] \""},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"            + \"[\" + PREFIX_DATE_OF_JOINING + \"DATE_OF_JOINING] \""},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"            + \"[\" + PREFIX_SALARY + \"SALARY] \""},{"lineNumber":56,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":57,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":58,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":59,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_EDIT_EMPLOYEE_SUCCESS \u003d \"Edited Employee: %1$s\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_DUPLICATE_EMPLOYEE \u003d \"This employee already exists in the Employee Tracker.\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"    private final EditEmployeeDescriptor editEmployeeDescriptor;"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"     * @param index of the employee in the filtered employee list to edit"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"     * @param editEmployeeDescriptor details to edit the employee with"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"    public EditCommand(Index index, EditEmployeeDescriptor editEmployeeDescriptor) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"        requireNonNull(editEmployeeDescriptor);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"        this.editEmployeeDescriptor \u003d new EditEmployeeDescriptor(editEmployeeDescriptor);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"        List\u003cEmployee\u003e lastShownList \u003d model.getFilteredEmployeeList();"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"        Employee employeeToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"        Employee editedEmployee \u003d createEditedEmployee(employeeToEdit, editEmployeeDescriptor);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"        if (!employeeToEdit.isSameEmployee(editedEmployee) \u0026\u0026 model.hasEmployee(editedEmployee)) {"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"        model.setEmployee(employeeToEdit, editedEmployee);"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"        model.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"     * Creates and returns a {@code Employee} with the details of {@code employeeToEdit}"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"     * edited with {@code editEmployeeDescriptor}."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"    private static Employee createEditedEmployee(Employee employeeToEdit, EditEmployeeDescriptor"},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":"            editEmployeeDescriptor) {"},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"        assert employeeToEdit !\u003d null;"},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":"        Name updatedName \u003d editEmployeeDescriptor.getName().orElse(employeeToEdit.getName());"},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"        Role updatedRole \u003d editEmployeeDescriptor.getRole().orElse(employeeToEdit.getRole());"},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":"        Phone updatedPhone \u003d editEmployeeDescriptor.getPhone().orElse(employeeToEdit.getPhone());"},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"        Email updatedEmail \u003d editEmployeeDescriptor.getEmail().orElse(employeeToEdit.getEmail());"},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"        Address updatedAddress \u003d editEmployeeDescriptor.getAddress().orElse(employeeToEdit.getAddress());"},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"        DateOfBirth updatedDateOfBirth \u003d editEmployeeDescriptor.getDateOfBirth()"},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"                .orElse(employeeToEdit.getDateOfBirth());"},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":"        DateOfJoining updatedDateOfJoining \u003d editEmployeeDescriptor.getDateOfJoining()"},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"                .orElse(employeeToEdit.getDateOfJoining());"},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":"        Salary updatedSalary \u003d editEmployeeDescriptor.getSalary().orElse(employeeToEdit.getSalary());"},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":"        Set\u003cTag\u003e updatedTags \u003d editEmployeeDescriptor.getTags().orElse(employeeToEdit.getTags());"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"        return new Employee(updatedName, updatedRole, updatedPhone, updatedEmail, updatedAddress, updatedDateOfBirth,"},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":"                updatedDateOfJoining, updatedSalary, updatedTags);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":140,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 editEmployeeDescriptor.equals(e.editEmployeeDescriptor);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"e0260222"},"content":"     * Stores the details to edit the employee with. Each non-empty field value will replace the"},{"lineNumber":145,"author":{"gitId":"e0260222"},"content":"     * corresponding field value of the employee."},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"e0260222"},"content":"    public static class EditEmployeeDescriptor {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":149,"author":{"gitId":"e0260222"},"content":"        private Role role;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":153,"author":{"gitId":"e0260222"},"content":"        private DateOfBirth dateOfBirth;"},{"lineNumber":154,"author":{"gitId":"e0260222"},"content":"        private DateOfJoining dateOfJoining;"},{"lineNumber":155,"author":{"gitId":"e0260222"},"content":"        private Salary salary;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"e0260222"},"content":"        public EditEmployeeDescriptor() {}"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":161,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":162,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":163,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":164,"author":{"gitId":"e0260222"},"content":"        public EditEmployeeDescriptor(EditEmployeeDescriptor toCopy) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":166,"author":{"gitId":"e0260222"},"content":"            setRole(toCopy.role);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":170,"author":{"gitId":"e0260222"},"content":"            setDateOfBirth(toCopy.dateOfBirth);"},{"lineNumber":171,"author":{"gitId":"e0260222"},"content":"            setDateOfJoining(toCopy.dateOfJoining);"},{"lineNumber":172,"author":{"gitId":"e0260222"},"content":"            setSalary(toCopy.salary);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":177,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":178,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":180,"author":{"gitId":"e0260222"},"content":"            return CollectionUtil.isAnyNonNull(name, role, phone, email, address, dateOfBirth, dateOfJoining,"},{"lineNumber":181,"author":{"gitId":"e0260222"},"content":"                    salary, tags);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"e0260222"},"content":"        public void setRole(Role role) {"},{"lineNumber":193,"author":{"gitId":"e0260222"},"content":"            this.role \u003d role;"},{"lineNumber":194,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":196,"author":{"gitId":"e0260222"},"content":"        public Optional\u003cRole\u003e getRole() {"},{"lineNumber":197,"author":{"gitId":"e0260222"},"content":"            return Optional.ofNullable(role);"},{"lineNumber":198,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"e0260222"},"content":"        public void setDateOfBirth(DateOfBirth dateOfBirth) {"},{"lineNumber":225,"author":{"gitId":"e0260222"},"content":"            this.dateOfBirth \u003d dateOfBirth;"},{"lineNumber":226,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":228,"author":{"gitId":"e0260222"},"content":"        public Optional\u003cDateOfBirth\u003e getDateOfBirth() {"},{"lineNumber":229,"author":{"gitId":"e0260222"},"content":"            return Optional.ofNullable(dateOfBirth);"},{"lineNumber":230,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":232,"author":{"gitId":"e0260222"},"content":"        public void setDateOfJoining(DateOfJoining dateOfJoining) {"},{"lineNumber":233,"author":{"gitId":"e0260222"},"content":"            this.dateOfJoining \u003d dateOfJoining;"},{"lineNumber":234,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":236,"author":{"gitId":"e0260222"},"content":"        public Optional\u003cDateOfJoining\u003e getDateOfJoining() {"},{"lineNumber":237,"author":{"gitId":"e0260222"},"content":"            return Optional.ofNullable(dateOfJoining);"},{"lineNumber":238,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":240,"author":{"gitId":"e0260222"},"content":"        public void setSalary(Salary salary) {"},{"lineNumber":241,"author":{"gitId":"e0260222"},"content":"            this.salary \u003d salary;"},{"lineNumber":242,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":243,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":244,"author":{"gitId":"e0260222"},"content":"        public Optional\u003cSalary\u003e getSalary() {"},{"lineNumber":245,"author":{"gitId":"e0260222"},"content":"            return Optional.ofNullable(salary);"},{"lineNumber":246,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":247,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":249,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":250,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":251,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":257,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":258,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":259,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":260,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":261,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":268,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":269,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":273,"author":{"gitId":"e0260222"},"content":"            if (!(other instanceof EditEmployeeDescriptor)) {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":275,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":278,"author":{"gitId":"e0260222"},"content":"            EditEmployeeDescriptor e \u003d (EditEmployeeDescriptor) other;"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":281,"author":{"gitId":"e0260222"},"content":"                    \u0026\u0026 getRole().equals(e.getRole())"},{"lineNumber":282,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":283,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":284,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":285,"author":{"gitId":"e0260222"},"content":"                    \u0026\u0026 getDateOfBirth().equals(e.getDateOfBirth())"},{"lineNumber":286,"author":{"gitId":"e0260222"},"content":"                    \u0026\u0026 getDateOfJoining().equals(e.getDateOfJoining())"},{"lineNumber":287,"author":{"gitId":"e0260222"},"content":"                    \u0026\u0026 getSalary().equals(e.getSalary())"},{"lineNumber":288,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":289,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":124,"-":167}},{"path":"src/main/java/employeetracker/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Employee Tracker as requested ...\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":16}},{"path":"src/main/java/employeetracker/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.NameContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":" * Finds and lists all employees in Employee Tracker whose name contains any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"            + \"Parameters: TYPE (must be n or r)/KEYWORD...\\n\""},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"            + \"Example: \" + COMMAND_WORD + \" n/ Roy Irfan\""},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"            + \" OR \""},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"            + COMMAND_WORD + \" r/ Developer\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        model.updateFilteredEmployeeList(predicate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"                String.format(Messages.MESSAGE_EMPLOYEES_LISTED_OVERVIEW, model.getFilteredEmployeeList().size()));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dgc5213":9,"e0260222":6,"-":33}},{"path":"src/main/java/employeetracker/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":19}},{"path":"src/main/java/employeetracker/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.model.Model.PREDICATE_SHOW_ALL_EMPLOYEES;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" * Lists all employees in the Employee Tracker to the user."},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all employees\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"        model.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":9,"-":15}},{"path":"src/main/java/employeetracker/logic/commands/SortCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"import employeetracker.model.Model;"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":" * Sort and list all employees in Employee Tracker by name, salary,"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":" * date of joining \u0026 date of birth contains any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":"public class SortCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"            + \": Sorts the list of all employee records in the Employee Tracker.\\n\""},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":"            + \"Parameters: TYPE (must be the letter n, s, j or b)\\n\""},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":"            + \"Example: \" + COMMAND_WORD + \" n\";"},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"    public static final String MESSAGE_SORT_EMPLOYEE_SUCCESS \u003d \"Employees list has been sorted.\";"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"    private final String sortField;"},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"    public SortCommand(String field) {"},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"        this.sortField \u003d field;"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"        requireNonNull(model);"},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":"        model.sortEmployee(sortField);"},{"lineNumber":34,"author":{"gitId":"daiweinus"},"content":"        return new CommandResult(MESSAGE_SORT_EMPLOYEE_SUCCESS);"},{"lineNumber":35,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":37,"author":{"gitId":"daiweinus"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"daiweinus"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitId":"daiweinus"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitId":"daiweinus"},"content":"                || (other instanceof SortCommand // instanceof handles nulls"},{"lineNumber":41,"author":{"gitId":"daiweinus"},"content":"                \u0026\u0026 sortField.equals(((SortCommand) other).sortField)); // state check"},{"lineNumber":42,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":44,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":44}},{"path":"src/main/java/employeetracker/logic/commands/StatsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chenduo1412"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":3,"author":{"gitId":"Chenduo1412"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":5,"author":{"gitId":"Chenduo1412"},"content":"import employeetracker.model.Model;"},{"lineNumber":6,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":7,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":8,"author":{"gitId":"Chenduo1412"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Chenduo1412"},"content":" * List all stats for all employees in the Employee Tracker to the user."},{"lineNumber":10,"author":{"gitId":"Chenduo1412"},"content":"*/"},{"lineNumber":11,"author":{"gitId":"Chenduo1412"},"content":"public class StatsCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":13,"author":{"gitId":"Chenduo1412"},"content":"    public static final String COMMAND_WORD \u003d \"stats\";"},{"lineNumber":14,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":15,"author":{"gitId":"Chenduo1412"},"content":"    private final String statsField;"},{"lineNumber":16,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":17,"author":{"gitId":"Chenduo1412"},"content":"    public StatsCommand(String field) {"},{"lineNumber":18,"author":{"gitId":"Chenduo1412"},"content":"        this.statsField \u003d field;"},{"lineNumber":19,"author":{"gitId":"Chenduo1412"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":21,"author":{"gitId":"Chenduo1412"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Chenduo1412"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":23,"author":{"gitId":"Chenduo1412"},"content":"        requireNonNull(model);"},{"lineNumber":24,"author":{"gitId":"Chenduo1412"},"content":"        String statement \u003d model.getStatement();"},{"lineNumber":25,"author":{"gitId":"Chenduo1412"},"content":"        return new CommandResult(statement);"},{"lineNumber":26,"author":{"gitId":"Chenduo1412"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":28,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":29,"author":{"gitId":"Chenduo1412"},"content":"}"}],"authorContributionMap":{"Chenduo1412":29}},{"path":"src/main/java/employeetracker/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":16}},{"path":"src/main/java/employeetracker/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_DATE_OF_JOINING;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_SALARY;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Address;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfBirth;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfJoining;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Email;"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Name;"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Phone;"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Role;"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Salary;"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.tag.Tag;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ROLE, PREFIX_PHONE,"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"                PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_DATE_OF_BIRTH, PREFIX_DATE_OF_JOINING, PREFIX_SALARY, PREFIX_TAG);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ROLE, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"                PREFIX_DATE_OF_BIRTH, PREFIX_DATE_OF_JOINING, PREFIX_SALARY) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"        DateOfBirth dateOfBirth \u003d ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DATE_OF_BIRTH).get());"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"        DateOfJoining dateOfJoining \u003d ParserUtil.parseDateOfJoining(argMultimap.getValue(PREFIX_DATE_OF_JOINING).get());"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        Salary salary \u003d ParserUtil.parseSalary(argMultimap.getValue(PREFIX_SALARY).get());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"        Employee employee \u003d new Employee(name, role, phone, email, address, dateOfBirth,"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"                dateOfJoining, salary, tagList);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"        return new AddCommand(employee);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":34,"-":39}},{"path":"src/main/java/employeetracker/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values."},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":59}},{"path":"src/main/java/employeetracker/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":147}},{"path":"src/main/java/employeetracker/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    public static final Prefix PREFIX_SALARY \u003d new Prefix(\"s/\");"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    public static final Prefix PREFIX_DATE_OF_BIRTH \u003d new Prefix(\"b/\");"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    public static final Prefix PREFIX_DATE_OF_JOINING \u003d new Prefix(\"j/\");"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":6,"-":13}},{"path":"src/main/java/employeetracker/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":5,"-":24}},{"path":"src/main/java/employeetracker/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_DATE_OF_JOINING;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_SALARY;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.EditCommand;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.EditCommand.EditEmployeeDescriptor;"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.tag.Tag;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ROLE, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"                        PREFIX_DATE_OF_BIRTH, PREFIX_DATE_OF_JOINING, PREFIX_SALARY, PREFIX_TAG);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        EditEmployeeDescriptor editEmployeeDescriptor \u003d new EditCommand.EditEmployeeDescriptor();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"            editEmployeeDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"        if (argMultimap.getValue(PREFIX_ROLE).isPresent()) {"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"            editEmployeeDescriptor.setRole(ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get()));"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"            editEmployeeDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"            editEmployeeDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"            editEmployeeDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        if (argMultimap.getValue(PREFIX_DATE_OF_BIRTH).isPresent()) {"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"            editEmployeeDescriptor.setDateOfBirth(ParserUtil.parseDateOfBirth("},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"                    argMultimap.getValue(PREFIX_DATE_OF_BIRTH).get()));"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"        if (argMultimap.getValue(PREFIX_DATE_OF_JOINING).isPresent()) {"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"            editEmployeeDescriptor.setDateOfJoining(ParserUtil.parseDateOfJoining("},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"                    argMultimap.getValue(PREFIX_DATE_OF_JOINING).get()));"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"        if (argMultimap.getValue(PREFIX_SALARY).isPresent()) {"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"            editEmployeeDescriptor.setSalary(ParserUtil.parseSalary(argMultimap.getValue(PREFIX_SALARY).get()));"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editEmployeeDescriptor::setTags);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"        if (!editEmployeeDescriptor.isAnyFieldEdited()) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"        return new EditCommand(index, editEmployeeDescriptor);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":41,"-":60}},{"path":"src/main/java/employeetracker/logic/parser/EmployeeTrackerParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"Chenduo1412"},"content":"import employeetracker.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"Chenduo1412"},"content":"import employeetracker.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"Chenduo1412"},"content":"import employeetracker.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"Chenduo1412"},"content":"import employeetracker.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"Chenduo1412"},"content":"import employeetracker.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"Chenduo1412"},"content":"import employeetracker.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"Chenduo1412"},"content":"import employeetracker.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"Chenduo1412"},"content":"import employeetracker.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"Chenduo1412"},"content":"import employeetracker.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"Chenduo1412"},"content":"import employeetracker.logic.commands.SortCommand;"},{"lineNumber":19,"author":{"gitId":"Chenduo1412"},"content":"import employeetracker.logic.commands.StatsCommand;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"public class EmployeeTrackerParser {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":47,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"daiweinus"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitId":"daiweinus"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"Chenduo1412"},"content":"        case StatsCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitId":"Chenduo1412"},"content":"            return new StatsCommandParser().parse(StatsCommand.COMMAND_WORD);"},{"lineNumber":76,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"daiweinus":3,"e0260222":5,"Chenduo1412":15,"-":62}},{"path":"src/main/java/employeetracker/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.FindCommand;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"import employeetracker.model.employee.Name;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.NameContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitId":"dgc5213"},"content":"import employeetracker.model.employee.Role;"},{"lineNumber":15,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"        String[] employeeKeywords \u003d new String[0];"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"        String findBy \u003d null;"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":"        requireNonNull(args);"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_ROLE);"},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":"            Name nameObjectArray \u003d (ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":44,"author":{"gitId":"dgc5213"},"content":"            trimmedArgs \u003d nameObjectArray.toString().trim();"},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":"            employeeKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":"            findBy \u003d String.valueOf(PREFIX_NAME);"},{"lineNumber":47,"author":{"gitId":"dgc5213"},"content":"        } else if (argMultimap.getValue(PREFIX_ROLE).isPresent()) {"},{"lineNumber":48,"author":{"gitId":"dgc5213"},"content":"            Role roleObjectArray \u003d (ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get()));"},{"lineNumber":49,"author":{"gitId":"dgc5213"},"content":"            trimmedArgs \u003d roleObjectArray.toString().trim();"},{"lineNumber":50,"author":{"gitId":"dgc5213"},"content":"            employeeKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":51,"author":{"gitId":"dgc5213"},"content":"            findBy \u003d String.valueOf(PREFIX_ROLE);"},{"lineNumber":52,"author":{"gitId":"dgc5213"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"dgc5213"},"content":"            throw new ParseException("},{"lineNumber":54,"author":{"gitId":"dgc5213"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":55,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":57,"author":{"gitId":"dgc5213"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(employeeKeywords), findBy));"},{"lineNumber":58,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dgc5213":31,"e0260222":5,"-":26}},{"path":"src/main/java/employeetracker/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":13}},{"path":"src/main/java/employeetracker/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Address;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfBirth;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfJoining;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Email;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Name;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Phone;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Role;"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Salary;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"     * Parses a {@code String role} into a {@code Role}."},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"     * @throws ParseException if the given {@code role} is invalid."},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"    public static Role parseRole(String role) throws ParseException {"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"        requireNonNull(role);"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"        String trimmedRole \u003d role.trim();"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        if (!Role.isValidRole(trimmedRole)) {"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"            throw new ParseException(Role.MESSAGE_CONSTRAINTS);"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"        return new Role(trimmedRole);"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":"     * Parses a {@code String dateOfBirth} into an {@code DateOfBirth}."},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"     * @throws ParseException if the given {@code dateOfBirth} is invalid."},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":"    public static DateOfBirth parseDateOfBirth(String dateOfBirth) throws ParseException {"},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"        requireNonNull(dateOfBirth);"},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"        String trimmedDateOfBirth \u003d dateOfBirth.trim();"},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":"        if (!DateOfBirth.isValidDateOfBirth(trimmedDateOfBirth)) {"},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":"            throw new ParseException(DateOfBirth.MESSAGE_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"e0260222"},"content":"        return new DateOfBirth(trimmedDateOfBirth);"},{"lineNumber":130,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":132,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":"     * Parses a {@code String dateOfJoining} into an {@code DateOfJoining}."},{"lineNumber":134,"author":{"gitId":"e0260222"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":135,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":136,"author":{"gitId":"e0260222"},"content":"     * @throws ParseException if the given {@code dateOfJoining} is invalid."},{"lineNumber":137,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"e0260222"},"content":"    public static DateOfJoining parseDateOfJoining(String dateOfJoining) throws ParseException {"},{"lineNumber":139,"author":{"gitId":"e0260222"},"content":"        requireNonNull(dateOfJoining);"},{"lineNumber":140,"author":{"gitId":"e0260222"},"content":"        String trimmedDateOfJoining \u003d dateOfJoining.trim();"},{"lineNumber":141,"author":{"gitId":"e0260222"},"content":"        if (!DateOfJoining.isValidDateOfJoining(trimmedDateOfJoining)) {"},{"lineNumber":142,"author":{"gitId":"e0260222"},"content":"            throw new ParseException(DateOfJoining.MESSAGE_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"e0260222"},"content":"        return new DateOfJoining(trimmedDateOfJoining);"},{"lineNumber":145,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":147,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"e0260222"},"content":"     * Parses a {@code String salary} into an {@code Salary}."},{"lineNumber":149,"author":{"gitId":"e0260222"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":150,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"e0260222"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":152,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"e0260222"},"content":"    public static Salary parseSalary(String salary) throws ParseException {"},{"lineNumber":154,"author":{"gitId":"e0260222"},"content":"        requireNonNull(salary);"},{"lineNumber":155,"author":{"gitId":"e0260222"},"content":"        String trimmedSalary \u003d salary.trim();"},{"lineNumber":156,"author":{"gitId":"e0260222"},"content":"        if (!Salary.isValidSalary(trimmedSalary)) {"},{"lineNumber":157,"author":{"gitId":"e0260222"},"content":"            throw new ParseException(Salary.MESSAGE_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"e0260222"},"content":"        return new Salary(trimmedSalary);"},{"lineNumber":160,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":165,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":73,"-":115}},{"path":"src/main/java/employeetracker/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string."},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":38}},{"path":"src/main/java/employeetracker/logic/parser/SortCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daiweinus"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":3,"author":{"gitId":"daiweinus"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":5,"author":{"gitId":"daiweinus"},"content":"import employeetracker.logic.commands.SortCommand;"},{"lineNumber":6,"author":{"gitId":"daiweinus"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":8,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":9,"author":{"gitId":"daiweinus"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"daiweinus"},"content":" * Parses input arguments and creates a new SortCommand object"},{"lineNumber":11,"author":{"gitId":"daiweinus"},"content":" */"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"daiweinus"},"content":"     * Parses the given {@code String} of arguments in the context of the SortCommand"},{"lineNumber":15,"author":{"gitId":"daiweinus"},"content":"     * and returns an SortCommand object for execution."},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"     * @throws ParseException if the input field does not conform the expected format"},{"lineNumber":17,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"daiweinus"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitId":"daiweinus"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":20,"author":{"gitId":"daiweinus"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":21,"author":{"gitId":"daiweinus"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":24,"author":{"gitId":"daiweinus"},"content":"        if (!trimmedArgs.equalsIgnoreCase(\"n\")"},{"lineNumber":25,"author":{"gitId":"daiweinus"},"content":"                \u0026\u0026 !trimmedArgs.equalsIgnoreCase(\"s\")"},{"lineNumber":26,"author":{"gitId":"daiweinus"},"content":"                \u0026\u0026 !trimmedArgs.equalsIgnoreCase(\"j\")"},{"lineNumber":27,"author":{"gitId":"daiweinus"},"content":"                \u0026\u0026 !trimmedArgs.equalsIgnoreCase(\"b\")) {"},{"lineNumber":28,"author":{"gitId":"daiweinus"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":31,"author":{"gitId":"daiweinus"},"content":"        return new SortCommand(trimmedArgs);"},{"lineNumber":32,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"daiweinus"},"content":"}"}],"authorContributionMap":{"daiweinus":33}},{"path":"src/main/java/employeetracker/logic/parser/StatsCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Chenduo1412"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":3,"author":{"gitId":"Chenduo1412"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":5,"author":{"gitId":"Chenduo1412"},"content":"import employeetracker.logic.commands.StatsCommand;"},{"lineNumber":6,"author":{"gitId":"Chenduo1412"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":8,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":9,"author":{"gitId":"Chenduo1412"},"content":"public class StatsCommandParser implements Parser\u003cStatsCommand\u003e {"},{"lineNumber":10,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":11,"author":{"gitId":"Chenduo1412"},"content":"    public static final String COMMAND_WORD \u003d \"stats\";"},{"lineNumber":12,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":13,"author":{"gitId":"Chenduo1412"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Chenduo1412"},"content":"     * Parses the given {@code String} of arguments in the context of the StatsCommand"},{"lineNumber":15,"author":{"gitId":"Chenduo1412"},"content":"     * and returns an StatsCommand object for execution."},{"lineNumber":16,"author":{"gitId":"Chenduo1412"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Chenduo1412"},"content":"    public StatsCommand parse(String args) throws ParseException {"},{"lineNumber":18,"author":{"gitId":"Chenduo1412"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":19,"author":{"gitId":"Chenduo1412"},"content":"        if (!trimmedArgs.equals(COMMAND_WORD)) {"},{"lineNumber":20,"author":{"gitId":"Chenduo1412"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, \"Invalid stats command\"));"},{"lineNumber":21,"author":{"gitId":"Chenduo1412"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Chenduo1412"},"content":"        return new StatsCommand(trimmedArgs);"},{"lineNumber":23,"author":{"gitId":"Chenduo1412"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Chenduo1412"},"content":"}"}],"authorContributionMap":{"Chenduo1412":24}},{"path":"src/main/java/employeetracker/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":15}},{"path":"src/main/java/employeetracker/model/EmployeeTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.UniqueEmployeeList;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" * Wraps all data at the employee-tracker level"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" * Duplicates are not allowed (by .isSameEmployee comparison)"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"public class EmployeeTracker implements ReadOnlyEmployeeTracker {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    private final UniqueEmployeeList employees;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        employees \u003d new UniqueEmployeeList();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    public EmployeeTracker() {}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"     * Creates an EmployeeTracker using the Employees in the {@code toBeCopied}"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    public EmployeeTracker(ReadOnlyEmployeeTracker toBeCopied) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"     * Replaces the contents of the employee list with {@code employees}."},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"     * {@code employees} must not contain duplicate employees."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"    public void setEmployees(List\u003cEmployee\u003e employees) {"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"        this.employees.setEmployees(employees);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"     * Resets the existing data of this {@code EmployeeTracker} with {@code newData}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"    public void resetData(ReadOnlyEmployeeTracker newData) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        setEmployees(newData.getEmployeeList());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"    //// employee-level operations"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"     * Returns true if a employee with the same identity as {@code employee} exists in the Employee Tracker."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"    public boolean hasEmployee(Employee employee) {"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"        requireNonNull(employee);"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        return employees.contains(employee);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"daiweinus"},"content":"     * Adds a employee to the Employee Tracker."},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"     * The employee must not already exist in the Employee Tracker."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"    public void addEmployee(Employee p) {"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"        employees.add(p);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"     * Replaces the given employee {@code target} in the list with {@code editedEmployee}."},{"lineNumber":79,"author":{"gitId":"daiweinus"},"content":"     * {@code target} must exist in the Employee Tracker."},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"     * The employee identity of {@code editedEmployee} must not be the same as another existing employee in the"},{"lineNumber":81,"author":{"gitId":"daiweinus"},"content":"     * Employee Tracker."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"    public void setEmployee(Employee target, Employee editedEmployee) {"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"        requireNonNull(editedEmployee);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"        employees.setEmployee(target, editedEmployee);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"daiweinus"},"content":"     * Removes {@code key} from this {@code EmployeeTracker}."},{"lineNumber":91,"author":{"gitId":"daiweinus"},"content":"     * {@code key} must exist in the Employee Tracker."},{"lineNumber":92,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"daiweinus"},"content":"    public void sortEmployee(String field) {"},{"lineNumber":94,"author":{"gitId":"daiweinus"},"content":"        employees.sortEmployee(field);"},{"lineNumber":95,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"     * Removes {@code key} from this {@code EmployeeTracker}."},{"lineNumber":99,"author":{"gitId":"daiweinus"},"content":"     * {@code key} must exist in the Employee Tracker."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":"    public void removeEmployee(Employee key) {"},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"        employees.remove(key);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":"        return employees.asUnmodifiableObservableList().size() + \" persons\";"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"    public ObservableList\u003cEmployee\u003e getEmployeeList() {"},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"        return employees.asUnmodifiableObservableList();"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"                || (other instanceof EmployeeTracker // instanceof handles nulls"},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 employees.equals(((EmployeeTracker) other).employees));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":"        return employees.hashCode();"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":130,"author":{"gitId":"Chenduo1412"},"content":"    public String getStatement() {"},{"lineNumber":131,"author":{"gitId":"Chenduo1412"},"content":"        String statement \u003d \"\";"},{"lineNumber":132,"author":{"gitId":"Chenduo1412"},"content":"        statement +\u003d \"Total Employees: \" + employees.noOfemployees() + \"\\n\";"},{"lineNumber":133,"author":{"gitId":"Chenduo1412"},"content":"        statement +\u003d \"Total Salary: $\" + String.format(\"%.2f\", employees.getTotalSalary()) + \"\\n\";"},{"lineNumber":134,"author":{"gitId":"Chenduo1412"},"content":"        statement +\u003d \"Highest Salary: $\" + employees.getHighestSalary() + \"\\n\";"},{"lineNumber":135,"author":{"gitId":"Chenduo1412"},"content":"        statement +\u003d \"Lowest Salary: $\" + employees.getLowestSalary() + \"\\n\";"},{"lineNumber":136,"author":{"gitId":"Chenduo1412"},"content":"        statement +\u003d \"Average Salary: $\" + String.format(\"%.2f\", employees.getAvgSalary()) + \"\\n\";"},{"lineNumber":137,"author":{"gitId":"Chenduo1412"},"content":"        statement +\u003d \"Longest Tenure: \" + employees.getLongestTenure() + \"\\n\";"},{"lineNumber":138,"author":{"gitId":"Chenduo1412"},"content":"        statement +\u003d \"Shortest Tenure: \" + employees.getShortestTenure() + \"\\n\";"},{"lineNumber":139,"author":{"gitId":"Chenduo1412"},"content":"        statement +\u003d \"Average Tenure: \" + employees.getAvgTenure() + \"\\n\";"},{"lineNumber":140,"author":{"gitId":"Chenduo1412"},"content":"        return statement;"},{"lineNumber":141,"author":{"gitId":"Chenduo1412"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"daiweinus":12,"e0260222":41,"Chenduo1412":13,"-":76}},{"path":"src/main/java/employeetracker/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    Predicate\u003cEmployee\u003e PREDICATE_SHOW_ALL_EMPLOYEES \u003d unused -\u003e true;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"     * Returns the user prefs\u0027 Employee Tracker file path."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    Path getEmployeeTrackerFilePath();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"     * Sets the user prefs\u0027 Employee Tracker file path."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    void setEmployeeTrackerFilePath(Path employeeTrackerFilePath);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"     * Replaces Employee Tracker data with the data in {@code employeeTracker}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"    void setEmployeeTracker(ReadOnlyEmployeeTracker employeeTracker);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"    /** Returns the EmployeeTracker */"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"    ReadOnlyEmployeeTracker getEmployeeTracker();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"     * Returns true if a employee with the same identity as {@code employee} exists in the Employee Tracker."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"    boolean hasEmployee(Employee employee);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"     * Deletes the given employee."},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"     * The employee must exist in the Employee Tracker."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"    void deleteEmployee(Employee target);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"     * Adds the given employee."},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"     * {@code employee} must not already exist in the Employee Tracker."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"    void addEmployee(Employee employee);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"     * Replaces the given employee {@code target} with {@code editedEmployee}."},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"     * {@code target} must exist in the Employee Tracker."},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"     * The employee identity of {@code editedEmployee} must not be the same as another existing employee"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"     * in the Employee Tracker."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"    void setEmployee(Employee target, Employee editedEmployee);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"    /** Returns an unmodifiable view of the filtered employee list */"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"    ObservableList\u003cEmployee\u003e getFilteredEmployeeList();"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"     * Updates the filter of the filtered employee list to filter by the given {@code predicate}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"    void updateFilteredEmployeeList(Predicate\u003cEmployee\u003e predicate);"},{"lineNumber":88,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":89,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"daiweinus"},"content":"     * Sorts the exist employees list in Employee Tracker."},{"lineNumber":91,"author":{"gitId":"daiweinus"},"content":"     * {@code field} must be chart n, s, d, b."},{"lineNumber":92,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"daiweinus"},"content":"    void sortEmployee(String field);"},{"lineNumber":94,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":95,"author":{"gitId":"Chenduo1412"},"content":"    String getStatement();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"daiweinus":6,"e0260222":30,"Chenduo1412":2,"-":58}},{"path":"src/main/java/employeetracker/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":" * Represents the in-memory model of the employee tracker data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    private final EmployeeTracker employeeTracker;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    private final FilteredList\u003cEmployee\u003e filteredEmployees;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * Initializes a ModelManager with the given employeeTracker and userPrefs."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    public ModelManager(ReadOnlyEmployeeTracker employeeTracker, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        requireAllNonNull(employeeTracker, userPrefs);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        logger.fine(\"Initializing with address book: \" + employeeTracker + \" and user prefs \" + userPrefs);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        this.employeeTracker \u003d new EmployeeTracker(employeeTracker);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        filteredEmployees \u003d new FilteredList\u003c\u003e(this.employeeTracker.getEmployeeList());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"        this(new EmployeeTracker(), new UserPrefs());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"    public Path getEmployeeTrackerFilePath() {"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"        return userPrefs.getEmployeeTrackerFilePath();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"    public void setEmployeeTrackerFilePath(Path employeeTrackerFilePath) {"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"        requireNonNull(employeeTrackerFilePath);"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"        userPrefs.setEmployeeTrackerFilePath(employeeTrackerFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EmployeeTracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"    public void setEmployeeTracker(ReadOnlyEmployeeTracker employeeTracker) {"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"        this.employeeTracker.resetData(employeeTracker);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"    public ReadOnlyEmployeeTracker getEmployeeTracker() {"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"        return employeeTracker;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"    public boolean hasEmployee(Employee employee) {"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"        requireNonNull(employee);"},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"        return employeeTracker.hasEmployee(employee);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"    public void deleteEmployee(Employee target) {"},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"        employeeTracker.removeEmployee(target);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"    public void addEmployee(Employee employee) {"},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"        employeeTracker.addEmployee(employee);"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"        updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":"    public void setEmployee(Employee target, Employee editedEmployee) {"},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"        requireAllNonNull(target, editedEmployee);"},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":"        employeeTracker.setEmployee(target, editedEmployee);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"daiweinus"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"daiweinus"},"content":"    public void sortEmployee(String field) {"},{"lineNumber":116,"author":{"gitId":"daiweinus"},"content":"        employeeTracker.sortEmployee(field);"},{"lineNumber":117,"author":{"gitId":"daiweinus"},"content":"        updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"},{"lineNumber":118,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":120,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Employee List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"     * Returns an unmodifiable view of the list of {@code Employee} backed by the internal list of"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitId":"e0260222"},"content":"    public ObservableList\u003cEmployee\u003e getFilteredEmployeeList() {"},{"lineNumber":129,"author":{"gitId":"e0260222"},"content":"        return filteredEmployees;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":"    public void updateFilteredEmployeeList(Predicate\u003cEmployee\u003e predicate) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":135,"author":{"gitId":"e0260222"},"content":"        filteredEmployees.setPredicate(predicate);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":152,"author":{"gitId":"e0260222"},"content":"        return employeeTracker.equals(other.employeeTracker)"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":154,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 filteredEmployees.equals(other.filteredEmployees);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"Chenduo1412"},"content":"    public String getStatement() {"},{"lineNumber":157,"author":{"gitId":"Chenduo1412"},"content":"        String statement \u003d employeeTracker.getStatement();"},{"lineNumber":158,"author":{"gitId":"Chenduo1412"},"content":"        return statement;"},{"lineNumber":159,"author":{"gitId":"Chenduo1412"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"daiweinus":6,"e0260222":47,"Chenduo1412":5,"-":102}},{"path":"src/main/java/employeetracker/model/ReadOnlyEmployeeTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":" * Unmodifiable view of an employee tracker"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"public interface ReadOnlyEmployeeTracker {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"daiweinus"},"content":"     * Returns an unmodifiable view of the employees list."},{"lineNumber":13,"author":{"gitId":"daiweinus"},"content":"     * This list will not contain any duplicate employees."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    ObservableList\u003cEmployee\u003e getEmployeeList();"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"daiweinus":2,"e0260222":6,"-":9}},{"path":"src/main/java/employeetracker/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    Path getEmployeeTrackerFilePath();"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":13}},{"path":"src/main/java/employeetracker/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    private Path employeeTrackerFilePath \u003d Paths.get(\"data\" , \"employeetracker.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"        setEmployeeTrackerFilePath(newUserPrefs.getEmployeeTrackerFilePath());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"    public Path getEmployeeTrackerFilePath() {"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        return employeeTrackerFilePath;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"    public void setEmployeeTrackerFilePath(Path employeeTrackerFilePath) {"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"        requireNonNull(employeeTrackerFilePath);"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        this.employeeTrackerFilePath \u003d employeeTrackerFilePath;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 employeeTrackerFilePath.equals(o.employeeTrackerFilePath);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"        return Objects.hash(guiSettings, employeeTrackerFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"        sb.append(\"\\nLocal data file location : \" + employeeTrackerFilePath);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":12,"-":75}},{"path":"src/main/java/employeetracker/model/employee/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":" * Represents an Employee\u0027s address in the Employee Tracker."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        assert(value !\u003d null);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"        assert(value !\u003d null);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":5,"-":54}},{"path":"src/main/java/employeetracker/model/employee/DateOfBirth.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":" * Represents an Employee\u0027s date of birth in the Employee Tracker."},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateOfBirth(String)}"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"public class DateOfBirth {"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Date of birth should be in yyyy-mm-dd format\";"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    public static final String VALIDATION_REGEX \u003d \"^\\\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$\";"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    public final String value;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     * Constructs a {@code DateOfBirth}."},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     * @param dateOfBirth A valid date of birth."},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    public DateOfBirth(String dateOfBirth) {"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"        requireNonNull(dateOfBirth);"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"        checkArgument(isValidDateOfBirth(dateOfBirth), MESSAGE_CONSTRAINTS);"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        value \u003d dateOfBirth;"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * Returns true if a given string is a valid date of birth."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    public static boolean isValidDateOfBirth(String test) {"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        assert(value !\u003d null);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        return value;"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"                || (other instanceof DateOfBirth // instanceof handles nulls"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 value.equals(((DateOfBirth) other).value)); // state check"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"    public int hashCode() {"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"        assert(value !\u003d null);"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":53}},{"path":"src/main/java/employeetracker/model/employee/DateOfJoining.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":" * Represents an Employee\u0027s date of joining in the Employee Tracker."},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateOfJoining(String)}"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"public class DateOfJoining {"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Date of joining should be in yyyy-mm-dd format\";"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    public static final String VALIDATION_REGEX \u003d \"^\\\\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])$\";"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    public final String value;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     * Constructs a {@code DateOfJoining}."},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     * @param dateOfJoining A valid date of joining."},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    public DateOfJoining(String dateOfJoining) {"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"        requireNonNull(dateOfJoining);"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"        checkArgument(isValidDateOfJoining(dateOfJoining), MESSAGE_CONSTRAINTS);"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        value \u003d dateOfJoining;"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * Returns true if a given string is a valid date of joining."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    public static boolean isValidDateOfJoining(String test) {"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        assert(value !\u003d null);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        return value;"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"                || (other instanceof DateOfJoining // instanceof handles nulls"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 value.equals(((DateOfJoining) other).value)); // state check"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"    public int hashCode() {"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"        assert(value !\u003d null);"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":53}},{"path":"src/main/java/employeetracker/model/employee/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":" * Represents an Employee\u0027s email in the Employee Tracker."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param email A valid email address."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Email(String email) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        value \u003d email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"        assert(value !\u003d null);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"        assert(value !\u003d null);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":5,"-":64}},{"path":"src/main/java/employeetracker/model/employee/Employee.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" * Represents an Employee in the Employee Tracker."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"public class Employee {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    private final DateOfBirth dateOfBirth;"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    private final DateOfJoining dateOfJoining;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    private final Role role;"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    private final Salary salary;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    public Employee(Name name, Role role, Phone phone, Email email, Address address, DateOfBirth dateOfBirth,"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"                    DateOfJoining dateOfJoining, Salary salary, Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        requireAllNonNull(name, role, phone, email, address, dateOfBirth, dateOfJoining, salary, tags);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"        this.role \u003d role;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        this.dateOfBirth \u003d dateOfBirth;"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        this.dateOfJoining \u003d dateOfJoining;"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        this.salary \u003d salary;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"    public Role getRole() {"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"        return role;"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"    public DateOfBirth getDateOfBirth() {"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"        return dateOfBirth;"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"    public DateOfJoining getDateOfJoining() {"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"        return dateOfJoining;"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"    public Salary getSalary() {"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"        return salary;"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"     * Returns true if both employees have the same name."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"    public boolean isSameEmployee(Employee otherEmployee) {"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"        if (otherEmployee \u003d\u003d this) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"        return otherEmployee !\u003d null"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 otherEmployee.getName().equals(getName());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"     * Returns true if both employees have the same identity and data fields."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":"        if (!(other instanceof Employee)) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"        Employee otherEmployee \u003d (Employee) other;"},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":"        return otherEmployee.getName().equals(getName())"},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 otherEmployee.getRole().equals(getRole())"},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 otherEmployee.getPhone().equals(getPhone())"},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 otherEmployee.getEmail().equals(getEmail())"},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 otherEmployee.getAddress().equals(getAddress())"},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 otherEmployee.getDateOfBirth().equals(getDateOfBirth())"},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 otherEmployee.getDateOfJoining().equals(getDateOfJoining())"},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 otherEmployee.getSalary().equals(getSalary())"},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 otherEmployee.getTags().equals(getTags());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":130,"author":{"gitId":"e0260222"},"content":"        return Objects.hash(name, role, phone, email, address, dateOfBirth, dateOfJoining, salary, tags);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":137,"author":{"gitId":"e0260222"},"content":"                .append(\"; Role: \")"},{"lineNumber":138,"author":{"gitId":"e0260222"},"content":"                .append(getRole())"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":144,"author":{"gitId":"e0260222"},"content":"                .append(getAddress())"},{"lineNumber":145,"author":{"gitId":"e0260222"},"content":"                .append(\"; Date of Birth: \")"},{"lineNumber":146,"author":{"gitId":"e0260222"},"content":"                .append(getDateOfBirth())"},{"lineNumber":147,"author":{"gitId":"e0260222"},"content":"                .append(\"; Date of Joining: \")"},{"lineNumber":148,"author":{"gitId":"e0260222"},"content":"                .append(getDateOfJoining())"},{"lineNumber":149,"author":{"gitId":"e0260222"},"content":"                .append(\"; Salary: \")"},{"lineNumber":150,"author":{"gitId":"e0260222"},"content":"                .append(getSalary());"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":59,"-":101}},{"path":"src/main/java/employeetracker/model/employee/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":" * Represents an Employee\u0027s name in the Employee Tracker."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"daiweinus"},"content":"     * The first character of the name must be a An alphanumeric \u0026 character."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String fullName;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param name A valid name."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Name(String name) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        fullName \u003d name;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        assert(fullName !\u003d null);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        assert(fullName !\u003d null);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"daiweinus":1,"e0260222":5,"-":54}},{"path":"src/main/java/employeetracker/model/employee/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.util.StringUtil;"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":" * Tests that a {@code Employee}\u0027s {@code Name, Role} matches any of the keywords given."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cEmployee\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"    private final String findBy;"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"     * Tests that NameContainsKeywordsPredicate matches any of the keywords given."},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords, String findBy) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"        this.findBy \u003d findBy;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    public boolean test(Employee employee) {"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"        if (findBy.equals(String.valueOf(PREFIX_NAME))) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            return keywords.stream()"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(employee.getName().fullName, keyword));"},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"        if (findBy.equals(String.valueOf(PREFIX_ROLE))) {"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":"            return keywords.stream()"},{"lineNumber":37,"author":{"gitId":"dgc5213"},"content":"                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("},{"lineNumber":38,"author":{"gitId":"dgc5213"},"content":"                            String.valueOf(employee.getRole()), keyword));"},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":"        return false;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dgc5213":26,"e0260222":5,"-":22}},{"path":"src/main/java/employeetracker/model/employee/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":" * Represents an Employee\u0027s phone number in the Employee Tracker."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        value \u003d phone;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        assert(value !\u003d null);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        assert(value !\u003d null);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":5,"-":49}},{"path":"src/main/java/employeetracker/model/employee/Role.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":" * Represents an Employee\u0027s role in the Employee Tracker."},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRole(String)}"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"public class Role {"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Roles can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"     * The first character of the role must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"     * Constructs an {@code Role}."},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     * @param role A valid role."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    public Role(String role) {"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        requireNonNull(role);"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        checkArgument(isValidRole(role), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"        value \u003d role;"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"     * Returns true if a given string is a valid role."},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"    public static boolean isValidRole(String test) {"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        assert(value !\u003d null);"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        return value;"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"                || (other instanceof Role // instanceof handles nulls"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 value.equals(((Role) other).value)); // state check"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"        assert(value !\u003d null);"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":59}},{"path":"src/main/java/employeetracker/model/employee/Salary.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":" * Represents an Employee\u0027s salary in the Employee Tracker."},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSalary(String)}"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"public class Salary {"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Salary should be an integer\";"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    public final String value;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"     * Constructs a {@code Salary}."},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"     * @param salary A valid salary amount."},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    public Salary(String salary) {"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"        requireNonNull(salary);"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"        checkArgument(isValidSalary(salary), MESSAGE_CONSTRAINTS);"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"        value \u003d salary;"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"     * Returns true if a given string is a valid salary."},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    public static boolean isValidSalary(String test) {"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        assert(value !\u003d null);"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        return value;"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"                || (other instanceof Salary // instanceof handles nulls"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 value.equals(((Salary) other).value)); // state check"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"    public int hashCode() {"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"        assert(value !\u003d null);"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":53}},{"path":"src/main/java/employeetracker/model/employee/UniqueEmployeeList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":6,"author":{"gitId":"Chenduo1412"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":7,"author":{"gitId":"Chenduo1412"},"content":"import java.util.Date;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import java.util.Iterator;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":16,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":17,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":" * A list of employees that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":" * A employee is considered unique by comparing using {@code Employee#isSameEmployee(Employee)}. As such, adding and"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":" * updating of persons uses Employee#isSameEmployee(Employee) for equality so as to ensure that the employee being added"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":" * or updated is unique in terms of identity in the UniqueEmployeeList. However, the removal of a employee uses"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":" * Employee#equals(Object) so as to ensure that the employee with exactly the same fields will be removed."},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":" *"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":" * Supports a minimal set of list operations."},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":" *"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":" * @see Employee#isSameEmployee(Employee)"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"public class UniqueEmployeeList implements Iterable\u003cEmployee\u003e {"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    private final ObservableList\u003cEmployee\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    private final ObservableList\u003cEmployee\u003e internalUnmodifiableList \u003d"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     * Returns true if the list contains an equivalent employee as the given argument."},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    public boolean contains(Employee toCheck) {"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"        requireNonNull(toCheck);"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        return internalList.stream().anyMatch(toCheck::isSameEmployee);"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"     * Adds a employee to the list."},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"     * The employee must not already exist in the list."},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    public void add(Employee toAdd) {"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"        requireNonNull(toAdd);"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"        if (contains(toAdd)) {"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"            throw new DuplicateEmployeeException();"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"        internalList.add(toAdd);"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"     * Replaces the employee {@code target} in the list with {@code editedEmployee}."},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"     * {@code target} must exist in the list."},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"     * The employee identity of {@code editedEmployee} must not be the same as another existing employee in the list."},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"    public void setEmployee(Employee target, Employee editedEmployee) {"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"        requireAllNonNull(target, editedEmployee);"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"            throw new EmployeeNotFoundException();"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"        if (!target.isSameEmployee(editedEmployee) \u0026\u0026 contains(editedEmployee)) {"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"            throw new DuplicateEmployeeException();"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"        internalList.set(index, editedEmployee);"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"     * Removes the equivalent employee from the list."},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"     * The employee must exist in the list."},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"    public void remove(Employee toRemove) {"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"        requireNonNull(toRemove);"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"            throw new EmployeeNotFoundException();"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"    public void setEmployees(UniqueEmployeeList replacement) {"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"        requireNonNull(replacement);"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"     * Replaces the contents of this list with {@code employees}."},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"     * {@code employees} must not contain duplicate employees."},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":"    public void setEmployees(List\u003cEmployee\u003e employees) {"},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"        requireAllNonNull(employees);"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"        if (!employeesAreUnique(employees)) {"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"            throw new DuplicateEmployeeException();"},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":"        internalList.setAll(employees);"},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"    public ObservableList\u003cEmployee\u003e asUnmodifiableObservableList() {"},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"        return internalUnmodifiableList;"},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"    public Iterator\u003cEmployee\u003e iterator() {"},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"        return internalList.iterator();"},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":"                || (other instanceof UniqueEmployeeList // instanceof handles nulls"},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":"                        \u0026\u0026 internalList.equals(((UniqueEmployeeList) other).internalList));"},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":"    @Override"},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"    public int hashCode() {"},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"        return internalList.hashCode();"},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":128,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"e0260222"},"content":"     * Returns true if {@code employees} contains only unique employees."},{"lineNumber":130,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"e0260222"},"content":"    private boolean employeesAreUnique(List\u003cEmployee\u003e employees) {"},{"lineNumber":132,"author":{"gitId":"e0260222"},"content":"        for (int i \u003d 0; i \u003c employees.size() - 1; i++) {"},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":"            for (int j \u003d i + 1; j \u003c employees.size(); j++) {"},{"lineNumber":134,"author":{"gitId":"e0260222"},"content":"                if (employees.get(i).isSameEmployee(employees.get(j))) {"},{"lineNumber":135,"author":{"gitId":"e0260222"},"content":"                    return false;"},{"lineNumber":136,"author":{"gitId":"e0260222"},"content":"                }"},{"lineNumber":137,"author":{"gitId":"e0260222"},"content":"            }"},{"lineNumber":138,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"e0260222"},"content":"        return true;"},{"lineNumber":140,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":142,"author":{"gitId":"daiweinus"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"daiweinus"},"content":"     * Sort the employees list by field."},{"lineNumber":144,"author":{"gitId":"daiweinus"},"content":"     * The employee must exist in the list."},{"lineNumber":145,"author":{"gitId":"daiweinus"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"daiweinus"},"content":"    public void sortEmployee(String field) {"},{"lineNumber":147,"author":{"gitId":"daiweinus"},"content":"        switch (field) {"},{"lineNumber":148,"author":{"gitId":"daiweinus"},"content":"        case \"n\":"},{"lineNumber":149,"author":{"gitId":"daiweinus"},"content":"            internalList.sort((s1, s2) -\u003e s1.getName().toString().compareToIgnoreCase(s2.getName().toString()));"},{"lineNumber":150,"author":{"gitId":"daiweinus"},"content":"            break;"},{"lineNumber":151,"author":{"gitId":"daiweinus"},"content":"        case \"s\":"},{"lineNumber":152,"author":{"gitId":"daiweinus"},"content":"            internalList.sort((s1, s2) -\u003e s1.getSalary().value.compareToIgnoreCase(s2.getSalary().value));"},{"lineNumber":153,"author":{"gitId":"daiweinus"},"content":"            break;"},{"lineNumber":154,"author":{"gitId":"daiweinus"},"content":"        case \"j\":"},{"lineNumber":155,"author":{"gitId":"daiweinus"},"content":"            internalList.sort((s1, s2) -\u003e s1.getDateOfJoining().value.compareToIgnoreCase(s2.getDateOfJoining().value));"},{"lineNumber":156,"author":{"gitId":"daiweinus"},"content":"            break;"},{"lineNumber":157,"author":{"gitId":"daiweinus"},"content":"        case \"b\":"},{"lineNumber":158,"author":{"gitId":"daiweinus"},"content":"            internalList.sort((s1, s2) -\u003e s1.getDateOfBirth().value.compareToIgnoreCase(s2.getDateOfBirth().value));"},{"lineNumber":159,"author":{"gitId":"daiweinus"},"content":"            break;"},{"lineNumber":160,"author":{"gitId":"daiweinus"},"content":"        default:"},{"lineNumber":161,"author":{"gitId":"daiweinus"},"content":"            assert false : \"Sort field Parameters: TYPE (must be the letter n, s, j or b)\";"},{"lineNumber":162,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"daiweinus"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":165,"author":{"gitId":"Chenduo1412"},"content":"    /**"},{"lineNumber":166,"author":{"gitId":"Chenduo1412"},"content":"     * Get the number of employees in the list."},{"lineNumber":167,"author":{"gitId":"Chenduo1412"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"Chenduo1412"},"content":"    public int noOfemployees() {"},{"lineNumber":169,"author":{"gitId":"Chenduo1412"},"content":"        return this.internalList.size();"},{"lineNumber":170,"author":{"gitId":"Chenduo1412"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":172,"author":{"gitId":"Chenduo1412"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"Chenduo1412"},"content":"     * Get the total Salary expenses for all employee in the list."},{"lineNumber":174,"author":{"gitId":"Chenduo1412"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"Chenduo1412"},"content":"    public double getTotalSalary() {"},{"lineNumber":176,"author":{"gitId":"Chenduo1412"},"content":"        double totalSalary \u003d 0;"},{"lineNumber":177,"author":{"gitId":"Chenduo1412"},"content":"        for (int i \u003d 0; i \u003c internalList.size(); i++) {"},{"lineNumber":178,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":179,"author":{"gitId":"Chenduo1412"},"content":"            totalSalary +\u003d Double.parseDouble(internalList.get(i).getSalary().value);"},{"lineNumber":180,"author":{"gitId":"Chenduo1412"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"Chenduo1412"},"content":"        return totalSalary;"},{"lineNumber":182,"author":{"gitId":"Chenduo1412"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":184,"author":{"gitId":"Chenduo1412"},"content":"    public String getHighestSalary() {"},{"lineNumber":185,"author":{"gitId":"Chenduo1412"},"content":"        double highestSalary \u003d 0;"},{"lineNumber":186,"author":{"gitId":"Chenduo1412"},"content":"        String highestSalaryEmployee \u003d \"\";"},{"lineNumber":187,"author":{"gitId":"Chenduo1412"},"content":"        String highestSalaryResult \u003d \"\";"},{"lineNumber":188,"author":{"gitId":"Chenduo1412"},"content":"        for (int i \u003d 0; i \u003c internalList.size(); i++) {"},{"lineNumber":189,"author":{"gitId":"Chenduo1412"},"content":"            if (highestSalary \u003c Double.parseDouble(internalList.get(i).getSalary().value)) {"},{"lineNumber":190,"author":{"gitId":"Chenduo1412"},"content":"                highestSalary \u003d Double.parseDouble(internalList.get(i).getSalary().value);"},{"lineNumber":191,"author":{"gitId":"Chenduo1412"},"content":"                highestSalaryEmployee \u003d internalList.get(i).getName().fullName;"},{"lineNumber":192,"author":{"gitId":"Chenduo1412"},"content":"            }"},{"lineNumber":193,"author":{"gitId":"Chenduo1412"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"Chenduo1412"},"content":"        highestSalaryResult \u003d String.format(\"%.2f\", highestSalary) + \" (\" + highestSalaryEmployee + \")\";"},{"lineNumber":195,"author":{"gitId":"Chenduo1412"},"content":"        return highestSalaryResult;"},{"lineNumber":196,"author":{"gitId":"Chenduo1412"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":198,"author":{"gitId":"Chenduo1412"},"content":"    public String getLowestSalary() {"},{"lineNumber":199,"author":{"gitId":"Chenduo1412"},"content":"        double lowestSalary \u003d Double.parseDouble(internalList.get(0).getSalary().value);"},{"lineNumber":200,"author":{"gitId":"Chenduo1412"},"content":"        String lowestSalaryEmployee \u003d internalList.get(0).getName().fullName;"},{"lineNumber":201,"author":{"gitId":"Chenduo1412"},"content":"        String lowestSalaryResult \u003d \"\";"},{"lineNumber":202,"author":{"gitId":"Chenduo1412"},"content":"        for (int i \u003d 1; i \u003c internalList.size(); i++) {"},{"lineNumber":203,"author":{"gitId":"Chenduo1412"},"content":"            if (lowestSalary \u003e Double.parseDouble(internalList.get(i).getSalary().value)) {"},{"lineNumber":204,"author":{"gitId":"Chenduo1412"},"content":"                lowestSalary \u003d Double.parseDouble(internalList.get(i).getSalary().value);"},{"lineNumber":205,"author":{"gitId":"Chenduo1412"},"content":"                lowestSalaryEmployee \u003d internalList.get(i).getName().fullName;"},{"lineNumber":206,"author":{"gitId":"Chenduo1412"},"content":"            }"},{"lineNumber":207,"author":{"gitId":"Chenduo1412"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"Chenduo1412"},"content":"        lowestSalaryResult \u003d String.format(\"%.2f\", lowestSalary) + \" (\" + lowestSalaryEmployee + \")\";"},{"lineNumber":209,"author":{"gitId":"Chenduo1412"},"content":"        return lowestSalaryResult;"},{"lineNumber":210,"author":{"gitId":"Chenduo1412"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":212,"author":{"gitId":"Chenduo1412"},"content":"    public double getAvgSalary() {"},{"lineNumber":213,"author":{"gitId":"Chenduo1412"},"content":"        double avgSalary;"},{"lineNumber":214,"author":{"gitId":"Chenduo1412"},"content":"        avgSalary \u003d getTotalSalary() / internalList.size();"},{"lineNumber":215,"author":{"gitId":"Chenduo1412"},"content":"        return avgSalary;"},{"lineNumber":216,"author":{"gitId":"Chenduo1412"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":218,"author":{"gitId":"Chenduo1412"},"content":"    public String getLongestTenure() {"},{"lineNumber":219,"author":{"gitId":"Chenduo1412"},"content":"        Date todaysDate \u003d new Date();"},{"lineNumber":220,"author":{"gitId":"Chenduo1412"},"content":"        Date dateOfJoin;"},{"lineNumber":221,"author":{"gitId":"Chenduo1412"},"content":"        long longest \u003d 0;"},{"lineNumber":222,"author":{"gitId":"Chenduo1412"},"content":"        long diffInMillies;"},{"lineNumber":223,"author":{"gitId":"Chenduo1412"},"content":"        long yearMiniSec \u003d Long.parseLong(\"31536000000\");"},{"lineNumber":224,"author":{"gitId":"Chenduo1412"},"content":"        long dayMiniSec \u003d Long.parseLong(\"86400000\");"},{"lineNumber":225,"author":{"gitId":"Chenduo1412"},"content":"        String employeeName \u003d \"\";"},{"lineNumber":226,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":227,"author":{"gitId":"Chenduo1412"},"content":"        try {"},{"lineNumber":228,"author":{"gitId":"Chenduo1412"},"content":"            for (int i \u003d 0; i \u003c internalList.size(); i++) {"},{"lineNumber":229,"author":{"gitId":"Chenduo1412"},"content":"                dateOfJoin \u003d new SimpleDateFormat(\"yyyy-MM-dd\").parse(internalList.get(i).getDateOfJoining().value);"},{"lineNumber":230,"author":{"gitId":"Chenduo1412"},"content":"                diffInMillies \u003d todaysDate.getTime() - dateOfJoin.getTime();"},{"lineNumber":231,"author":{"gitId":"Chenduo1412"},"content":"                if (longest \u003c diffInMillies) {"},{"lineNumber":232,"author":{"gitId":"Chenduo1412"},"content":"                    longest \u003d diffInMillies;"},{"lineNumber":233,"author":{"gitId":"Chenduo1412"},"content":"                    employeeName \u003d internalList.get(i).getName().fullName;"},{"lineNumber":234,"author":{"gitId":"Chenduo1412"},"content":"                }"},{"lineNumber":235,"author":{"gitId":"Chenduo1412"},"content":"            }"},{"lineNumber":236,"author":{"gitId":"Chenduo1412"},"content":"        } catch (Exception e) {"},{"lineNumber":237,"author":{"gitId":"Chenduo1412"},"content":"            System.out.println(e.toString());"},{"lineNumber":238,"author":{"gitId":"Chenduo1412"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":240,"author":{"gitId":"Chenduo1412"},"content":"        int totalYears \u003d (int) (longest / yearMiniSec);"},{"lineNumber":241,"author":{"gitId":"Chenduo1412"},"content":"        int days \u003d (int) (longest / dayMiniSec - (totalYears * 365));"},{"lineNumber":242,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":243,"author":{"gitId":"Chenduo1412"},"content":"        return totalYears + \" Years \" + days + \" Days (\" + employeeName + \")\";"},{"lineNumber":244,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":245,"author":{"gitId":"Chenduo1412"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":247,"author":{"gitId":"Chenduo1412"},"content":"    public String getShortestTenure() {"},{"lineNumber":248,"author":{"gitId":"Chenduo1412"},"content":"        int totalYears \u003d 0;"},{"lineNumber":249,"author":{"gitId":"Chenduo1412"},"content":"        int days \u003d 0;"},{"lineNumber":250,"author":{"gitId":"Chenduo1412"},"content":"        String employeeName \u003d internalList.get(0).getName().fullName;"},{"lineNumber":251,"author":{"gitId":"Chenduo1412"},"content":"        try {"},{"lineNumber":252,"author":{"gitId":"Chenduo1412"},"content":"            Date todaysDate \u003d new Date();"},{"lineNumber":253,"author":{"gitId":"Chenduo1412"},"content":"            Date dateOfJoin;"},{"lineNumber":254,"author":{"gitId":"Chenduo1412"},"content":"            long yearMiniSec \u003d Long.parseLong(\"31536000000\");"},{"lineNumber":255,"author":{"gitId":"Chenduo1412"},"content":"            long dayMiniSec \u003d Long.parseLong(\"86400000\");"},{"lineNumber":256,"author":{"gitId":"Chenduo1412"},"content":"            long shortest \u003d"},{"lineNumber":257,"author":{"gitId":"Chenduo1412"},"content":"                    new SimpleDateFormat(\"yyyy-MM-dd\").parse(internalList.get(0).getDateOfJoining().value).getTime();"},{"lineNumber":258,"author":{"gitId":"Chenduo1412"},"content":"            long diffInMillies;"},{"lineNumber":259,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":260,"author":{"gitId":"Chenduo1412"},"content":"            for (int i \u003d 1; i \u003c internalList.size(); i++) {"},{"lineNumber":261,"author":{"gitId":"Chenduo1412"},"content":"                dateOfJoin \u003d new SimpleDateFormat(\"yyyy-MM-dd\").parse(internalList.get(i).getDateOfJoining().value);"},{"lineNumber":262,"author":{"gitId":"Chenduo1412"},"content":"                diffInMillies \u003d todaysDate.getTime() - dateOfJoin.getTime();"},{"lineNumber":263,"author":{"gitId":"Chenduo1412"},"content":"                if (shortest \u003e diffInMillies) {"},{"lineNumber":264,"author":{"gitId":"Chenduo1412"},"content":"                    shortest \u003d diffInMillies;"},{"lineNumber":265,"author":{"gitId":"Chenduo1412"},"content":"                    employeeName \u003d internalList.get(i).getName().fullName;"},{"lineNumber":266,"author":{"gitId":"Chenduo1412"},"content":"                }"},{"lineNumber":267,"author":{"gitId":"Chenduo1412"},"content":"            }"},{"lineNumber":268,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":269,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":270,"author":{"gitId":"Chenduo1412"},"content":"            totalYears \u003d (int) (shortest / yearMiniSec);"},{"lineNumber":271,"author":{"gitId":"Chenduo1412"},"content":"            days \u003d (int) (shortest / dayMiniSec - (totalYears * 365));"},{"lineNumber":272,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":273,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":274,"author":{"gitId":"Chenduo1412"},"content":"        } catch (Exception e) {"},{"lineNumber":275,"author":{"gitId":"Chenduo1412"},"content":"            System.out.println(e.toString());"},{"lineNumber":276,"author":{"gitId":"Chenduo1412"},"content":"        }"},{"lineNumber":277,"author":{"gitId":"Chenduo1412"},"content":"        return totalYears + \" Years \" + days + \" Days (\" + employeeName + \")\";"},{"lineNumber":278,"author":{"gitId":"Chenduo1412"},"content":"    }"},{"lineNumber":279,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":280,"author":{"gitId":"Chenduo1412"},"content":"    public String getAvgTenure() {"},{"lineNumber":281,"author":{"gitId":"Chenduo1412"},"content":"        Date todaysDate \u003d new Date();"},{"lineNumber":282,"author":{"gitId":"Chenduo1412"},"content":"        Date dateOfJoin;"},{"lineNumber":283,"author":{"gitId":"Chenduo1412"},"content":"        long diffInMillies;"},{"lineNumber":284,"author":{"gitId":"Chenduo1412"},"content":"        long yearMiniSec \u003d Long.parseLong(\"31536000000\");"},{"lineNumber":285,"author":{"gitId":"Chenduo1412"},"content":"        long dayMiniSec \u003d Long.parseLong(\"86400000\");"},{"lineNumber":286,"author":{"gitId":"Chenduo1412"},"content":"        long totalMillies \u003d 0;"},{"lineNumber":287,"author":{"gitId":"Chenduo1412"},"content":"        long avgTensure \u003d 0;"},{"lineNumber":288,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":289,"author":{"gitId":"Chenduo1412"},"content":"        try {"},{"lineNumber":290,"author":{"gitId":"Chenduo1412"},"content":"            for (int i \u003d 0; i \u003c internalList.size(); i++) {"},{"lineNumber":291,"author":{"gitId":"Chenduo1412"},"content":"                dateOfJoin \u003d new SimpleDateFormat(\"yyyy-MM-dd\").parse(internalList.get(i).getDateOfJoining().value);"},{"lineNumber":292,"author":{"gitId":"Chenduo1412"},"content":"                diffInMillies \u003d todaysDate.getTime() - dateOfJoin.getTime();"},{"lineNumber":293,"author":{"gitId":"Chenduo1412"},"content":"                totalMillies +\u003d diffInMillies;"},{"lineNumber":294,"author":{"gitId":"Chenduo1412"},"content":"            }"},{"lineNumber":295,"author":{"gitId":"Chenduo1412"},"content":"        } catch (Exception e) {"},{"lineNumber":296,"author":{"gitId":"Chenduo1412"},"content":"            System.out.println(e.toString());"},{"lineNumber":297,"author":{"gitId":"Chenduo1412"},"content":"        }"},{"lineNumber":298,"author":{"gitId":"Chenduo1412"},"content":"        avgTensure \u003d totalMillies / internalList.size();"},{"lineNumber":299,"author":{"gitId":"Chenduo1412"},"content":"        int totalYears \u003d (int) (avgTensure / yearMiniSec);"},{"lineNumber":300,"author":{"gitId":"Chenduo1412"},"content":"        int days \u003d (int) (avgTensure / dayMiniSec - (totalYears * 365));"},{"lineNumber":301,"author":{"gitId":"Chenduo1412"},"content":"        return totalYears + \" Years \" + days + \" Days\";"},{"lineNumber":302,"author":{"gitId":"Chenduo1412"},"content":"    }"},{"lineNumber":303,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":304,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"daiweinus":24,"e0260222":136,"Chenduo1412":144}},{"path":"src/main/java/employeetracker/model/employee/exceptions/DuplicateEmployeeException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee.exceptions;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":" * Signals that the operation will result in duplicate Employees (Employees are considered duplicates if they have the"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":" * same identity)."},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"public class DuplicateEmployeeException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"    public DuplicateEmployeeException() {"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"        super(\"Operation would result in duplicate persons\");"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":11}},{"path":"src/main/java/employeetracker/model/employee/exceptions/EmployeeNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee.exceptions;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":" * Signals that the operation is unable to find the specified employee."},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"public class EmployeeNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"e0260222":6}},{"path":"src/main/java/employeetracker/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.tag;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":" * Represents a Tag in the Employee Tracker."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":51}},{"path":"src/main/java/employeetracker/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.EmployeeTracker;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyEmployeeTracker;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Address;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfBirth;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfJoining;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Email;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Name;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Phone;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Role;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Salary;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":" * Contains utility methods for populating {@code EmployeeTracker} with sample data."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    public static Employee[] getSampleEmployees() {"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        return new Employee[] {"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"            new Employee(new Name(\"Alex Yeoh\"), new Role(\"Developer\"), new Phone(\"87438807\"),"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"                    new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"                    new DateOfBirth(\"1990-12-10\"), new DateOfJoining(\"2020-01-02\"), new Salary(\"5000\"),"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"                    getTagSet(\"Founder\")),"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"            new Employee(new Name(\"Bernice Yu\"), new Role(\"Developer\"), new Phone(\"99272758\"),"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"                    new Email(\"berniceyu@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"                    new DateOfBirth(\"1988-03-10\"), new DateOfJoining(\"2020-01-02\"), new Salary(\"5000\"),"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"                    getTagSet(\"Mentor\", \"l33tCoder\")),"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"            new Employee(new Name(\"Charlotte Oliveiro\"), new Role(\"System Analyst\"), new Phone(\"93210283\"),"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"                    new Email(\"charlotte@example.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"                    new DateOfBirth(\"1991-11-01\"), new DateOfJoining(\"2020-01-15\"), new Salary(\"6000\"),"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"                    getTagSet(\"ComputerWizard\")),"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"            new Employee(new Name(\"David Li\"), new Role(\"Finance Manager\"), new Phone(\"91031282\"),"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"                    new Email(\"lidavid@example.com\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"                    new DateOfBirth(\"1992-05-28\"), new DateOfJoining(\"2020-02-01\"), new Salary(\"6000\"),"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"                    getTagSet(\"AmateurCoder\")),"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"            new Employee(new Name(\"Irfan Ibrahim\"), new Role(\"Account Manager\"), new Phone(\"92492021\"),"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"                    new Email(\"irfan@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"                    new DateOfBirth(\"1984-08-20\"), new DateOfJoining(\"2020-02-01\"), new Salary(\"6000\"),"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"                    getTagSet(\"BusiestEmployee\")),"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"            new Employee(new Name(\"Roy Balakrishnan\"), new Role(\"Project Manager\"), new Phone(\"92624417\"),"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"                    new Email(\"royb@example.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"                    new DateOfBirth(\"1979-01-14\"), new DateOfJoining(\"2020-03-01\"), new Salary(\"7000\"),"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"                    getTagSet(\"NewestEmployee\"))"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"    public static ReadOnlyEmployeeTracker getSampleEmployeeTracker() {"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"        EmployeeTracker sampleAb \u003d new EmployeeTracker();"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"        for (Employee sampleEmployee : getSampleEmployees()) {"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"            sampleAb.addEmployee(sampleEmployee);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":49,"-":25}},{"path":"src/main/java/employeetracker/storage/EmployeeTrackerStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.EmployeeTracker;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyEmployeeTracker;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" * Represents a storage for {@link EmployeeTracker}."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"public interface EmployeeTrackerStorage {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    Path getEmployeeTrackerFilePath();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"     * Returns EmployeeTracker data as a {@link ReadOnlyEmployeeTracker}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    Optional\u003cReadOnlyEmployeeTracker\u003e readEmployeeTracker() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     * @see #getEmployeeTrackerFilePath()"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    Optional\u003cReadOnlyEmployeeTracker\u003e readEmployeeTracker(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"     * Saves the given {@link ReadOnlyEmployeeTracker} to the storage."},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     * @param employeeTracker cannot be null."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"    void saveEmployeeTracker(ReadOnlyEmployeeTracker employeeTracker) throws IOException;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"     * @see #saveEmployeeTracker(ReadOnlyEmployeeTracker)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"    void saveEmployeeTracker(ReadOnlyEmployeeTracker employeeTracker, Path filePath) throws IOException;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":16,"-":30}},{"path":"src/main/java/employeetracker/storage/JsonAdaptedEmployee.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Address;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfBirth;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfJoining;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Email;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Name;"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Phone;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Role;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Salary;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.tag.Tag;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":" * Jackson-friendly version of {@link Employee}."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"class JsonAdaptedEmployee {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Employee\u0027s %s field is missing!\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    private final String role;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"    private final String dateOfBirth;"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"    private final String dateOfJoining;"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    private final String salary;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"     * Constructs a {@code JsonAdaptedEmployee} with the given employee details."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    public JsonAdaptedEmployee(@JsonProperty(\"name\") String name, @JsonProperty(\"role\") String role,"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"            @JsonProperty(\"phone\") String phone, @JsonProperty(\"email\") String email,"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"            @JsonProperty(\"address\") String address, @JsonProperty(\"dateOfBirth\") String dateOfBirth,"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"            @JsonProperty(\"dateOfJoining\") String dateOfJoining, @JsonProperty(\"salary\") String salary,"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        this.role \u003d role;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"        this.dateOfBirth \u003d dateOfBirth;"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        this.dateOfJoining \u003d dateOfJoining;"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        this.salary \u003d salary;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"     * Converts a given {@code Employee} into this class for Jackson use."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"    public JsonAdaptedEmployee(Employee source) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"        role \u003d source.getRole().value;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"        dateOfBirth \u003d source.getDateOfBirth().value;"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"        dateOfJoining \u003d source.getDateOfJoining().value;"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"        salary \u003d source.getSalary().value;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"     * Converts this Jackson-friendly adapted employee object into the model\u0027s {@code Employee} object."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted employee."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":"    public Employee toModelType() throws IllegalValueException {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"        if (role \u003d\u003d null) {"},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName()));"},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"        if (!Role.isValidRole(role)) {"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"            throw new IllegalValueException(Role.MESSAGE_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"        final Role modelRole \u003d new Role(role);"},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"e0260222"},"content":"        if (dateOfBirth \u003d\u003d null) {"},{"lineNumber":132,"author":{"gitId":"e0260222"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":"                    DateOfBirth.class.getSimpleName()));"},{"lineNumber":134,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"e0260222"},"content":"        if (!DateOfBirth.isValidDateOfBirth(dateOfBirth)) {"},{"lineNumber":136,"author":{"gitId":"e0260222"},"content":"            throw new IllegalValueException(DateOfBirth.MESSAGE_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"e0260222"},"content":"        final DateOfBirth modelDateOfBirth \u003d new DateOfBirth(dateOfBirth);"},{"lineNumber":139,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":140,"author":{"gitId":"e0260222"},"content":"        if (dateOfJoining \u003d\u003d null) {"},{"lineNumber":141,"author":{"gitId":"e0260222"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":142,"author":{"gitId":"e0260222"},"content":"                    DateOfJoining.class.getSimpleName()));"},{"lineNumber":143,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"e0260222"},"content":"        if (!DateOfJoining.isValidDateOfJoining(dateOfJoining)) {"},{"lineNumber":145,"author":{"gitId":"e0260222"},"content":"            throw new IllegalValueException(DateOfJoining.MESSAGE_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"e0260222"},"content":"        final DateOfJoining modelDateOfJoining \u003d new DateOfJoining(dateOfJoining);"},{"lineNumber":148,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":149,"author":{"gitId":"e0260222"},"content":"        if (salary \u003d\u003d null) {"},{"lineNumber":150,"author":{"gitId":"e0260222"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":151,"author":{"gitId":"e0260222"},"content":"                    Salary.class.getSimpleName()));"},{"lineNumber":152,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"e0260222"},"content":"        if (!Salary.isValidSalary(salary)) {"},{"lineNumber":154,"author":{"gitId":"e0260222"},"content":"            throw new IllegalValueException(Salary.MESSAGE_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"e0260222"},"content":"        final Salary modelSalary \u003d new Salary(salary);"},{"lineNumber":157,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":159,"author":{"gitId":"e0260222"},"content":"        return new Employee(modelName, modelRole, modelPhone, modelEmail, modelAddress, modelDateOfBirth,"},{"lineNumber":160,"author":{"gitId":"e0260222"},"content":"                modelDateOfJoining, modelSalary, modelTags);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":75,"-":88}},{"path":"src/main/java/employeetracker/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.tag.Tag;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":45}},{"path":"src/main/java/employeetracker/storage/JsonEmployeeTrackerStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyEmployeeTracker;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":" * A class to access EmployeeTracker data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"public class JsonEmployeeTrackerStorage implements EmployeeTrackerStorage {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonEmployeeTrackerStorage.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    public JsonEmployeeTrackerStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    public Path getEmployeeTrackerFilePath() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    public Optional\u003cReadOnlyEmployeeTracker\u003e readEmployeeTracker() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        return readEmployeeTracker(filePath);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"     * Similar to {@link #readEmployeeTracker()}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    public Optional\u003cReadOnlyEmployeeTracker\u003e readEmployeeTracker(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"        Optional\u003cJsonSerializableEmployeeTracker\u003e jsonEmployeeTracker \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"                filePath, JsonSerializableEmployeeTracker.class);"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        if (!jsonEmployeeTracker.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"            return Optional.of(jsonEmployeeTracker.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"    public void saveEmployeeTracker(ReadOnlyEmployeeTracker employeeTracker) throws IOException {"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"        saveEmployeeTracker(employeeTracker, filePath);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"     * Similar to {@link #saveEmployeeTracker(ReadOnlyEmployeeTracker)}."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"    public void saveEmployeeTracker(ReadOnlyEmployeeTracker employeeTracker, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"        requireNonNull(employeeTracker);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableEmployeeTracker(employeeTracker), filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":26,"-":54}},{"path":"src/main/java/employeetracker/storage/JsonSerializableEmployeeTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.EmployeeTracker;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyEmployeeTracker;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":" * An Immutable EmployeeTracker that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"@JsonRootName(value \u003d \"employeetracker\")"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"class JsonSerializableEmployeeTracker {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    public static final String MESSAGE_DUPLICATE_EMPLOYEE \u003d \"Employees list contains duplicate employee(s).\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    private final List\u003cJsonAdaptedEmployee\u003e employees \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"     * Constructs a {@code JsonSerializableEmployeeTracker} with the given persons."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    public JsonSerializableEmployeeTracker(@JsonProperty(\"employees\") List\u003cJsonAdaptedEmployee\u003e employees) {"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        this.employees.addAll(employees);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"     * Converts a given {@code ReadOnlyEmployeeTracker} into this class for Jackson use."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableEmployeeTracker}."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"    public JsonSerializableEmployeeTracker(ReadOnlyEmployeeTracker source) {"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        employees.addAll(source.getEmployeeList().stream().map(JsonAdaptedEmployee::new).collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"     * Converts this address book into the model\u0027s {@code EmployeeTracker} object."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"    public EmployeeTracker toModelType() throws IllegalValueException {"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"        EmployeeTracker employeeTracker \u003d new EmployeeTracker();"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        for (JsonAdaptedEmployee jsonAdaptedEmployee : employees) {"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"            Employee employee \u003d jsonAdaptedEmployee.toModelType();"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"            if (employeeTracker.hasEmployee(employee)) {"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"            employeeTracker.addEmployee(employee);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        return employeeTracker;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":26,"-":34}},{"path":"src/main/java/employeetracker/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.util.JsonUtil;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":5,"-":42}},{"path":"src/main/java/employeetracker/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyEmployeeTracker;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"public interface Storage extends EmployeeTrackerStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    Path getEmployeeTrackerFilePath();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    Optional\u003cReadOnlyEmployeeTracker\u003e readEmployeeTracker() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    void saveEmployeeTracker(ReadOnlyEmployeeTracker addressBook) throws IOException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":9,"-":23}},{"path":"src/main/java/employeetracker/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyEmployeeTracker;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyUserPrefs;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":" * Manages storage of EmployeeTracker data in local storage."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    private EmployeeTrackerStorage employeeTrackerStorage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * Creates a {@code StorageManager} with the given {@code EmployeeTrackerStorage} and {@code UserPrefStorage}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    public StorageManager(EmployeeTrackerStorage employeeTrackerStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        this.employeeTrackerStorage \u003d employeeTrackerStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EmployeeTracker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"    public Path getEmployeeTrackerFilePath() {"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"        return employeeTrackerStorage.getEmployeeTrackerFilePath();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"    public Optional\u003cReadOnlyEmployeeTracker\u003e readEmployeeTracker() throws DataConversionException, IOException {"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"        return readEmployeeTracker(employeeTrackerStorage.getEmployeeTrackerFilePath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"    public Optional\u003cReadOnlyEmployeeTracker\u003e readEmployeeTracker(Path filePath)"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"            throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        return employeeTrackerStorage.readEmployeeTracker(filePath);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"    public void saveEmployeeTracker(ReadOnlyEmployeeTracker employeeTracker) throws IOException {"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"        saveEmployeeTracker(employeeTracker, employeeTrackerStorage.getEmployeeTrackerFilePath());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"    public void saveEmployeeTracker(ReadOnlyEmployeeTracker employeeTracker, Path filePath) throws IOException {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"        employeeTrackerStorage.saveEmployeeTracker(employeeTracker, filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":23,"-":57}},{"path":"src/main/java/employeetracker/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyUserPrefs;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.UserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":" * Represents a storage for {@link employeetracker.model.UserPrefs}."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"     * Saves the given {@link employeetracker.model.ReadOnlyUserPrefs} to the storage."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":6,"-":30}},{"path":"src/main/java/employeetracker/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.CommandResult;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.exceptions.CommandException;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private TextField commandTextField;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box."},{"lineNumber":31,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @FunctionalInterface"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result."},{"lineNumber":79,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"         * @see employeetracker.logic.Logic#execute(String)"},{"lineNumber":81,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":5,"-":80}},{"path":"src/main/java/employeetracker/ui/EmployeeCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":" * An UI component that displays information of a {@code Employee}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"public class EmployeeCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    private static final String FXML \u003d \"EmployeeListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on EmployeeTracker level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    public final Employee employee;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    private Label role;"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"    private Label dateOfBirth;"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"    private Label dateOfJoining;"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"    private Label salary;"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"     * Creates a {@code PersonCode} with the given {@code Employee} and index to display."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"    public EmployeeCard(Employee employee, int displayedIndex) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        this.employee \u003d employee;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"        name.setText(employee.getName().fullName);"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"        role.setText(\"\\uD83D\\uDC77 \" + employee.getRole().value);"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"        phone.setText(\"\\uD83D\\uDD81 \" + employee.getPhone().value);"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"        address.setText(\"\\uD83C\\uDFE0 \" + employee.getAddress().value);"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"        email.setText(\"\\uD83D\\uDCE7 \" + employee.getEmail().value);"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"        dateOfBirth.setText(\"\\uD83D\\uDC76 \" + employee.getDateOfBirth().value);"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"        dateOfJoining.setText(\"\\uD83D\\uDC66 \" + employee.getDateOfJoining().value);"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        salary.setText(\"\\uD83D\\uDCB2 \" + String.format(\"%,d\", Integer.parseInt(employee.getSalary().value)));"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"        employee.getTags().stream()"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"        if (!(other instanceof EmployeeCard)) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":"        EmployeeCard card \u003d (EmployeeCard) other;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"                \u0026\u0026 employee.equals(card.employee);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":30,"-":59}},{"path":"src/main/java/employeetracker/ui/EmployeeListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.LogsCenter;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":" * Panel containing the list of employees."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"public class EmployeeListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    private static final String FXML \u003d \"EmployeeListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(EmployeeListPanel.class);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    private ListView\u003cEmployee\u003e employeeListView;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * Creates a {@code EmployeeListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    public EmployeeListPanel(ObservableList\u003cEmployee\u003e employeeList) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        employeeListView.setItems(employeeList);"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        employeeListView.setCellFactory(listView -\u003e new EmployeeListViewCell());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Employee} using a {@code EmployeeCard}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    class EmployeeListViewCell extends ListCell\u003cEmployee\u003e {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        protected void updateItem(Employee employee, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"            super.updateItem(employee, empty);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"            if (empty || employee \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"                setGraphic(new EmployeeCard(employee, getIndex() + 1).getRoot());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":18,"-":31}},{"path":"src/main/java/employeetracker/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.LogsCenter;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-tic4002-f18-2.github.io/tp2/\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":99}},{"path":"src/main/java/employeetracker/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.LogsCenter;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.Logic;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.CommandResult;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    private EmployeeListPanel employeeListPanel;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    private StackPane employeeListPanelPlaceholder;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":69,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":90,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":91,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":97,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":101,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"        employeeListPanel \u003d new EmployeeListPanel(logic.getFilteredEmployeeList());"},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"        employeeListPanelPlaceholder.getChildren().add(employeeListPanel.getRoot());"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getEmployeeTrackerFilePath());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":156,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"e0260222"},"content":"    public EmployeeListPanel getEmployeeListPanel() {"},{"lineNumber":170,"author":{"gitId":"e0260222"},"content":"        return employeeListPanel;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":175,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":176,"author":{"gitId":"e0260222"},"content":"     * @see employeetracker.logic.Logic#execute(String)"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":15,"Chenduo1412":3,"-":181}},{"path":"src/main/java/employeetracker/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":27}},{"path":"src/main/java/employeetracker/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":27}},{"path":"src/main/java/employeetracker/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":12}},{"path":"src/main/java/employeetracker/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import employeetracker.MainApp;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.LogsCenter;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.util.StringUtil;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.Logic;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/employee_tracker_32.png\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon."},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":6,"-":83}},{"path":"src/main/java/employeetracker/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.MainApp;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":86}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"e0260222"},"content":".cell_small_fixed_width_label {"},{"lineNumber":130,"author":{"gitId":"e0260222"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":131,"author":{"gitId":"e0260222"},"content":"    -fx-font-size: 13px;"},{"lineNumber":132,"author":{"gitId":"e0260222"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":"    -fx-min-width: 140;"},{"lineNumber":134,"author":{"gitId":"e0260222"},"content":"    -fx-pref-width: 140;"},{"lineNumber":135,"author":{"gitId":"e0260222"},"content":"}"},{"lineNumber":136,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":".cell_small_label {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":".stack-pane {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":".pane-with-border {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":".status-bar {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":".result-display {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":".result-display .label {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":".status-bar .label {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":".status-bar-with-border {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":".status-bar-with-border .label {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":".grid-pane {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":".context-menu {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":".context-menu .label {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"}"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":".menu-bar {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"}"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":".menu-bar .label {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":".menu .left-container {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    -fx-background-color: black;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"/*"},{"lineNumber":219,"author":{"gitId":"-"},"content":" * Metro style Push Button"},{"lineNumber":220,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":221,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":222,"author":{"gitId":"-"},"content":" */"},{"lineNumber":223,"author":{"gitId":"-"},"content":".button {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":233,"author":{"gitId":"-"},"content":"}"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":".button:hover {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":237,"author":{"gitId":"-"},"content":"}"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":240,"author":{"gitId":"-"},"content":"  -fx-background-color: white;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":".button:focused {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":250,"author":{"gitId":"-"},"content":"}"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":256,"author":{"gitId":"-"},"content":"}"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":".button:default {"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":".button:default:hover {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"}"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":273,"author":{"gitId":"-"},"content":"}"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":279,"author":{"gitId":"-"},"content":"}"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);"},{"lineNumber":283,"author":{"gitId":"-"},"content":"}"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    -fx-fill: white;"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":290,"author":{"gitId":"-"},"content":"}"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":".scroll-bar {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":".scroll-bar .thumb {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;"},{"lineNumber":299,"author":{"gitId":"-"},"content":"}"},{"lineNumber":300,"author":{"gitId":"-"},"content":""},{"lineNumber":301,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":302,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":312,"author":{"gitId":"-"},"content":"}"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":316,"author":{"gitId":"-"},"content":"}"},{"lineNumber":317,"author":{"gitId":"-"},"content":""},{"lineNumber":318,"author":{"gitId":"-"},"content":"#cardPane {"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;"},{"lineNumber":321,"author":{"gitId":"-"},"content":"}"},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"#commandTypeLabel {"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"}"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"#commandTextField {"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":337,"author":{"gitId":"-"},"content":"}"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"}"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"#resultDisplay .content {"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":346,"author":{"gitId":"-"},"content":"}"},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"-"},"content":"#tags {"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;"},{"lineNumber":351,"author":{"gitId":"-"},"content":"}"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"#tags .label {"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;"},{"lineNumber":358,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;"},{"lineNumber":359,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;"},{"lineNumber":360,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":8,"-":352}},{"path":"src/main/resources/view/EmployeeListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"      \u003cLabel fx:id\u003d\"role\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$role\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"      \u003cHBox\u003e"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_fixed_width_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        \u003cLabel fx:id\u003d\"salary\" styleClass\u003d\"cell_small_fixed_width_label\" text\u003d\"\\$salary\" /\u003e"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"      \u003c/HBox\u003e"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"      \u003cHBox\u003e"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"        \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_fixed_width_label\" text\u003d\"\\$dateOfBirth\" /\u003e"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        \u003cLabel fx:id\u003d\"dateOfJoining\" styleClass\u003d\"cell_small_fixed_width_label\" text\u003d\"\\$dateOfJoining\" /\u003e"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"      \u003c/HBox\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"e0260222":10,"-":34}},{"path":"src/main/resources/view/EmployeeListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"  \u003cListView fx:id\u003d\"employeeListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"e0260222":1,"-":7}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"         title\u003d\"Employee Tracker\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    \u003cImage url\u003d\"@/images/employee_tracker_32.png\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"        \u003cVBox fx:id\u003d\"employeeList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"          \u003cStackPane fx:id\u003d\"employeeListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"e0260222":4,"-":56}},{"path":"src/test/data/JsonEmployeeTrackerStorageTest/invalidAndValidEmployee.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":"  \"employees\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\","},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"    \"role\": \"Developer\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"    \"address\": \"4th street\","},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"    \"dateOfBirth\": \"1988-01-17\","},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"    \"dateOfJoining\": \"2020-01-05\","},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    \"salary\": \"5000\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\","},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    \"role\": \"Developer\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\","},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    \"address\": \"4th street\","},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    \"dateOfBirth\": \"1988-01-17\","},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    \"dateOfJoining\": \"2020-01-05\","},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    \"salary\": \"5000\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":11,"-":10}},{"path":"src/test/data/JsonEmployeeTrackerStorageTest/invalidEmployee.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":"  \"employees\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"    \"role\": \"Developer\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"    \"address\": \"4th street\","},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"    \"dateOfBirth\": \"1988-01-17\","},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"    \"dateOfJoining\": \"2020-01-05\","},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    \"salary\": \"5000\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":6,"-":6}},{"path":"src/test/data/JsonSerializableEmployeeTrackerTest/duplicateEmployee.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":"  \"employees\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"    \"role\": \"Finance Manager\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"    \"dateOfBirth\": \"1988-09-14\","},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"    \"dateOfJoining\": \"2020-02-01\","},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    \"salary\": \"6000\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"tagged\": [ \"friends\" ]"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"    \"role\": \"Finance Manager\","},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\","},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    \"address\": \"4th street\","},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    \"dateOfBirth\": \"1988-09-14\","},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    \"salary\": \"6000\","},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    \"dateOfJoining\": \"2020-02-01\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":10,"-":12}},{"path":"src/test/data/JsonSerializableEmployeeTrackerTest/invalidEmployee.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":"  \"employees\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\","},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"    \"role\": \"Developer\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\": \"invalid@email!3e\","},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"    \"address\": \"4th street\","},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"    \"dateOfBirth\": \"1988-01-17\","},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"    \"dateOfJoining\": \"2020-01-05\","},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    \"salary\": \"5000\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":6,"-":6}},{"path":"src/test/data/JsonSerializableEmployeeTrackerTest/typicalEmployees.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":"  \"_comment\": \"Employee Tracker save file which contains the same Employee values as in TypicalEmployees#getTypicalEmployeeTracker()\","},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"  \"employees\": [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"    \"role\": \"Finance Manager\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"    \"dateOfBirth\": \"1988-09-14\","},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    \"dateOfJoining\": \"2020-02-01\","},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    \"salary\": \"6000\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    \"role\": \"Project Manager\","},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    \"dateOfBirth\": \"1989-11-14\","},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    \"dateOfJoining\": \"2020-02-01\","},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    \"salary\": \"6000\","},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    \"role\": \"System Analyst\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    \"dateOfBirth\": \"1979-09-01\","},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    \"dateOfJoining\": \"2020-02-01\","},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    \"salary\": \"6000\","},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    \"role\": \"Account Manager\","},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"    \"dateOfBirth\": \"1977-01-05\","},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    \"dateOfJoining\": \"2021-02-01\","},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"    \"salary\": \"6000\","},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    \"role\": \"Developer\","},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"    \"dateOfBirth\": \"2001-04-11\","},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"    \"dateOfJoining\": \"2021-02-01\","},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"    \"salary\": \"5000\","},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"    \"role\": \"Developer\","},{"lineNumber":56,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":57,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"    \"dateOfBirth\": \"2000-08-29\","},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"    \"dateOfJoining\": \"2021-02-01\","},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"    \"salary\": \"5000\","},{"lineNumber":62,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"    \"role\": \"Developer\","},{"lineNumber":66,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":67,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":68,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"    \"dateOfBirth\": \"1981-03-16\","},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"    \"dateOfJoining\": \"2020-03-01\","},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"    \"salary\": \"5000\","},{"lineNumber":72,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":73,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":30,"-":44}},{"path":"src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"extra\" : \"some value \","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"      \"y\" : 100,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"      \"z\" : 99"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"  \"employeeTrackerFilePath\" : \"employeetracker.json\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":12}},{"path":"src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"guiSettings\" : {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"windowWidth\" : 1000.0,"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"windowHeight\" : 500.0,"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"windowCoordinates\" : {"},{"lineNumber":6,"author":{"gitId":"-"},"content":"      \"x\" : 300,"},{"lineNumber":7,"author":{"gitId":"-"},"content":"      \"y\" : 100"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  },"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"  \"employeeTrackerFilePath\" : \"employeetracker.json\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":10}},{"path":"src/test/java/employeetracker/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":57}},{"path":"src/test/java/employeetracker/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":26}},{"path":"src/test/java/employeetracker/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":133}},{"path":"src/test/java/employeetracker/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.core.index;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":58}},{"path":"src/test/java/employeetracker/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"        assertNotNull(AppUtil.getImage(\"/images/employee_tracker_32.png\"));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":33}},{"path":"src/test/java/employeetracker/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":105}},{"path":"src/test/java/employeetracker/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.Config;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":4,"-":112}},{"path":"src/test/java/employeetracker/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":21}},{"path":"src/test/java/employeetracker/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.testutil.SerializableTestClass;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.testutil.TestUtil;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":42}},{"path":"src/test/java/employeetracker/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":141}},{"path":"src/test/java/employeetracker/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.DATE_OF_JOINING_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.SALARY_DESC_AMY;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.AMY;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.AddCommand;"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.CommandResult;"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.ListCommand;"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.exceptions.CommandException;"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ModelManager;"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyEmployeeTracker;"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.UserPrefs;"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"import employeetracker.storage.JsonEmployeeTrackerStorage;"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"import employeetracker.storage.JsonUserPrefsStorage;"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"import employeetracker.storage.StorageManager;"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"import employeetracker.testutil.EmployeeBuilder;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        JsonEmployeeTrackerStorage addressBookStorage \u003d"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"                new JsonEmployeeTrackerStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"        // Setup LogicManager with JsonEmployeeTrackerIoExceptionThrowingStub"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"        JsonEmployeeTrackerStorage addressBookStorage \u003d"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"                new JsonEmployeeTrackerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + ROLE_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"                + DATE_OF_BIRTH_DESC_AMY + DATE_OF_JOINING_DESC_AMY + SALARY_DESC_AMY + ADDRESS_DESC_AMY;"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"        Employee expectedEmployee \u003d new EmployeeBuilder(AMY).withTags().build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"        expectedModel.addEmployee(expectedEmployee);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"    public void getFilteredEmployeeList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredEmployeeList().remove(0));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":136,"author":{"gitId":"e0260222"},"content":"        Model expectedModel \u003d new ModelManager(model.getEmployeeTracker(), new UserPrefs());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"e0260222"},"content":"    private static class JsonEmployeeTrackerIoExceptionThrowingStub extends JsonEmployeeTrackerStorage {"},{"lineNumber":157,"author":{"gitId":"e0260222"},"content":"        private JsonEmployeeTrackerIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":162,"author":{"gitId":"e0260222"},"content":"        public void saveEmployeeTracker(ReadOnlyEmployeeTracker employeeTracker, Path filePath) throws IOException {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":43,"-":123}},{"path":"src/test/java/employeetracker/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.getTypicalEmployeeTracker;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.testutil.EmployeeBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        model \u003d new ModelManager(getTypicalEmployeeTracker(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    public void execute_newEmployee_success() {"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"        Employee validEmployee \u003d new EmployeeBuilder().build();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"        Model expectedModel \u003d new ModelManager(model.getEmployeeTracker(), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        expectedModel.addEmployee(validEmployee);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        assertCommandSuccess(new AddCommand(validEmployee), model,"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validEmployee), expectedModel);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    public void execute_duplicateEmployee_throwsCommandException() {"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"        Employee employeeInList \u003d model.getEmployeeTracker().getEmployeeList().get(0);"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        assertCommandFailure(new AddCommand(employeeInList), model, AddCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":19,"-":26}},{"path":"src/test/java/employeetracker/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.EmployeeTracker;"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyEmployeeTracker;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyUserPrefs;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"import employeetracker.testutil.EmployeeBuilder;"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    public void constructor_nullEmployee_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    public void execute_employeeAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        ModelStubAcceptingEmployeeAdded modelStub \u003d new ModelStubAcceptingEmployeeAdded();"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        Employee validEmployee \u003d new EmployeeBuilder().build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"        CommandResult commandResult \u003d new AddCommand(validEmployee).execute(modelStub);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validEmployee), commandResult.getFeedbackToUser());"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"        assertEquals(Arrays.asList(validEmployee), modelStub.employeesAdded);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    public void execute_duplicateEmployee_throwsCommandException() {"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"        Employee validEmployee \u003d new EmployeeBuilder().build();"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"        AddCommand addCommand \u003d new AddCommand(validEmployee);"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"        ModelStub modelStub \u003d new ModelStubWithEmployee(validEmployee);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        assertThrows(CommandException.class,"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"                AddCommand.MESSAGE_DUPLICATE_EMPLOYEE, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        Employee alice \u003d new EmployeeBuilder().withName(\"Alice\").build();"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        Employee bob \u003d new EmployeeBuilder().withName(\"Bob\").build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"        // different employee -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"        public Path getEmployeeTrackerFilePath() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"        public void setEmployeeTrackerFilePath(Path employeeTrackerFilePath) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"        public void addEmployee(Employee employee) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":"        public void setEmployeeTracker(ReadOnlyEmployeeTracker newData) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":"        public ReadOnlyEmployeeTracker getEmployeeTracker() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitId":"e0260222"},"content":"        public boolean hasEmployee(Employee employee) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":"        public void deleteEmployee(Employee target) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitId":"e0260222"},"content":"        public void setEmployee(Employee target, Employee editedEmployee) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitId":"e0260222"},"content":"        public ObservableList\u003cEmployee\u003e getFilteredEmployeeList() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitId":"e0260222"},"content":"        public void updateFilteredEmployeeList(Predicate\u003cEmployee\u003e predicate) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"daiweinus"},"content":""},{"lineNumber":152,"author":{"gitId":"daiweinus"},"content":"        @Override"},{"lineNumber":153,"author":{"gitId":"daiweinus"},"content":"        public void sortEmployee(String field) {"},{"lineNumber":154,"author":{"gitId":"daiweinus"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitId":"daiweinus"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"Chenduo1412"},"content":""},{"lineNumber":157,"author":{"gitId":"Chenduo1412"},"content":"        @Override"},{"lineNumber":158,"author":{"gitId":"Chenduo1412"},"content":"        public String getStatement() {"},{"lineNumber":159,"author":{"gitId":"Chenduo1412"},"content":"            return null;"},{"lineNumber":160,"author":{"gitId":"Chenduo1412"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"e0260222"},"content":"     * A Model stub that contains a single employee."},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"e0260222"},"content":"    private class ModelStubWithEmployee extends ModelStub {"},{"lineNumber":167,"author":{"gitId":"e0260222"},"content":"        private final Employee employee;"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"e0260222"},"content":"        ModelStubWithEmployee(Employee employee) {"},{"lineNumber":170,"author":{"gitId":"e0260222"},"content":"            requireNonNull(employee);"},{"lineNumber":171,"author":{"gitId":"e0260222"},"content":"            this.employee \u003d employee;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":175,"author":{"gitId":"e0260222"},"content":"        public boolean hasEmployee(Employee employee) {"},{"lineNumber":176,"author":{"gitId":"e0260222"},"content":"            requireNonNull(employee);"},{"lineNumber":177,"author":{"gitId":"e0260222"},"content":"            return this.employee.isSameEmployee(employee);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"e0260222"},"content":"     * A Model stub that always accept the employee being added."},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"e0260222"},"content":"    private class ModelStubAcceptingEmployeeAdded extends ModelStub {"},{"lineNumber":185,"author":{"gitId":"e0260222"},"content":"        final ArrayList\u003cEmployee\u003e employeesAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":188,"author":{"gitId":"e0260222"},"content":"        public boolean hasEmployee(Employee employee) {"},{"lineNumber":189,"author":{"gitId":"e0260222"},"content":"            requireNonNull(employee);"},{"lineNumber":190,"author":{"gitId":"e0260222"},"content":"            return employeesAdded.stream().anyMatch(employee::isSameEmployee);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":194,"author":{"gitId":"e0260222"},"content":"        public void addEmployee(Employee employee) {"},{"lineNumber":195,"author":{"gitId":"e0260222"},"content":"            requireNonNull(employee);"},{"lineNumber":196,"author":{"gitId":"e0260222"},"content":"            employeesAdded.add(employee);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":200,"author":{"gitId":"e0260222"},"content":"        public ReadOnlyEmployeeTracker getEmployeeTracker() {"},{"lineNumber":201,"author":{"gitId":"e0260222"},"content":"            return new EmployeeTracker();"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"daiweinus":5,"e0260222":57,"Chenduo1412":5,"-":138}},{"path":"src/test/java/employeetracker/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.getTypicalEmployeeTracker;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.EmployeeTracker;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ModelManager;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    public void execute_emptyEmployeeTracker_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    public void execute_nonEmptyEmployeeTracker_success() {"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        Model model \u003d new ModelManager(getTypicalEmployeeTracker(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalEmployeeTracker(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        expectedModel.setEmployeeTracker(new EmployeeTracker());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":12,"-":20}},{"path":"src/test/java/employeetracker/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":53}},{"path":"src/test/java/employeetracker/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_DATE_OF_JOINING;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":10,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_SALARY;"},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"import employeetracker.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"import employeetracker.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"import employeetracker.model.EmployeeTracker;"},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"import employeetracker.model.Model;"},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"import employeetracker.model.employee.NameContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"import employeetracker.testutil.EditEmployeeDescriptorBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":30,"author":{"gitId":"-"},"content":" */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"    public static final String VALID_ROLE_AMY \u003d \"Developer\";"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":"    public static final String VALID_ROLE_BOB \u003d \"Finance Manager\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":43,"author":{"gitId":"dgc5213"},"content":"    public static final String VALID_DATE_OF_BIRTH_AMY \u003d \"1990-10-12\";"},{"lineNumber":44,"author":{"gitId":"dgc5213"},"content":"    public static final String VALID_DATE_OF_BIRTH_BOB \u003d \"1990-11-12\";"},{"lineNumber":45,"author":{"gitId":"dgc5213"},"content":"    public static final String VALID_DATE_OF_JOINING_AMY \u003d \"2019-02-01\";"},{"lineNumber":46,"author":{"gitId":"dgc5213"},"content":"    public static final String VALID_DATE_OF_JOINING_BOB \u003d \"2020-03-01\";"},{"lineNumber":47,"author":{"gitId":"dgc5213"},"content":"    public static final String VALID_SALARY_AMY \u003d \"6000\";"},{"lineNumber":48,"author":{"gitId":"dgc5213"},"content":"    public static final String VALID_SALARY_BOB \u003d \"6500\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":54,"author":{"gitId":"dgc5213"},"content":"    public static final String ROLE_DESC_AMY \u003d \" \" + PREFIX_ROLE + VALID_ROLE_AMY;"},{"lineNumber":55,"author":{"gitId":"dgc5213"},"content":"    public static final String ROLE_DESC_BOB \u003d \" \" + PREFIX_ROLE + VALID_ROLE_BOB;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":62,"author":{"gitId":"dgc5213"},"content":"    public static final String DATE_OF_BIRTH_DESC_AMY \u003d \" \" + PREFIX_DATE_OF_BIRTH + VALID_DATE_OF_BIRTH_AMY;"},{"lineNumber":63,"author":{"gitId":"dgc5213"},"content":"    public static final String DATE_OF_BIRTH_DESC_BOB \u003d \" \" + PREFIX_DATE_OF_BIRTH + VALID_DATE_OF_BIRTH_BOB;"},{"lineNumber":64,"author":{"gitId":"dgc5213"},"content":"    public static final String DATE_OF_JOINING_DESC_AMY \u003d \" \" + PREFIX_DATE_OF_JOINING + VALID_DATE_OF_JOINING_AMY;"},{"lineNumber":65,"author":{"gitId":"dgc5213"},"content":"    public static final String DATE_OF_JOINING_DESC_BOB \u003d \" \" + PREFIX_DATE_OF_JOINING + VALID_DATE_OF_JOINING_BOB;"},{"lineNumber":66,"author":{"gitId":"dgc5213"},"content":"    public static final String SALARY_DESC_AMY \u003d \" \" + PREFIX_SALARY + VALID_SALARY_AMY;"},{"lineNumber":67,"author":{"gitId":"dgc5213"},"content":"    public static final String SALARY_DESC_BOB \u003d \" \" + PREFIX_SALARY + VALID_SALARY_BOB;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":75,"author":{"gitId":"dgc5213"},"content":"    public static final String INVALID_DATE_OF_BIRTH_DESC \u003d"},{"lineNumber":76,"author":{"gitId":"dgc5213"},"content":"            \" \" + PREFIX_DATE_OF_BIRTH + \"1990/12/10\"; // \u0027/\u0027 not allowed in date of birth"},{"lineNumber":77,"author":{"gitId":"dgc5213"},"content":"    public static final String INVALID_DATE_OF_JOINING_DESC \u003d"},{"lineNumber":78,"author":{"gitId":"dgc5213"},"content":"            \" \" + PREFIX_DATE_OF_BIRTH + \"2020/12/10\"; // \u0027/\u0027 not allowed in date of joining"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"dgc5213"},"content":"    public static final EditCommand.EditEmployeeDescriptor DESC_AMY;"},{"lineNumber":85,"author":{"gitId":"dgc5213"},"content":"    public static final EditCommand.EditEmployeeDescriptor DESC_BOB;"},{"lineNumber":86,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":89,"author":{"gitId":"dgc5213"},"content":"        DESC_AMY \u003d new EditEmployeeDescriptorBuilder().withName(VALID_NAME_AMY).withRole(VALID_ROLE_AMY)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":92,"author":{"gitId":"dgc5213"},"content":"        DESC_BOB \u003d new EditEmployeeDescriptorBuilder().withName(VALID_NAME_BOB).withRole(VALID_ROLE_AMY)"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":127,"author":{"gitId":"dgc5213"},"content":"     * - the address book, filtered employee list and selected employee in {@code actualModel} remain unchanged"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":132,"author":{"gitId":"dgc5213"},"content":"        EmployeeTracker expectedEmployeeTracker \u003d new EmployeeTracker(actualModel.getEmployeeTracker());"},{"lineNumber":133,"author":{"gitId":"dgc5213"},"content":"        List\u003cEmployee\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredEmployeeList());"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":136,"author":{"gitId":"dgc5213"},"content":"        assertEquals(expectedEmployeeTracker, actualModel.getEmployeeTracker());"},{"lineNumber":137,"author":{"gitId":"dgc5213"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredEmployeeList());"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"dgc5213"},"content":"     * Updates {@code model}\u0027s filtered list to show only the employee at the given {@code targetIndex} in the"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"dgc5213"},"content":"    public static void showEmployeeAtIndex(Model model, Index targetIndex) {"},{"lineNumber":144,"author":{"gitId":"dgc5213"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredEmployeeList().size());"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"dgc5213"},"content":"        Employee employee \u003d model.getFilteredEmployeeList().get(targetIndex.getZeroBased());"},{"lineNumber":147,"author":{"gitId":"dgc5213"},"content":"        final String[] splitName \u003d employee.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":148,"author":{"gitId":"dgc5213"},"content":"        model.updateFilteredEmployeeList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0]), \"n/\"));"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"dgc5213"},"content":"        assertEquals(1, model.getFilteredEmployeeList().size());"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dgc5213":56,"-":97}},{"path":"src/test/java/employeetracker/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.showEmployeeAtIndex;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.getTypicalEmployeeTracker;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalIndexes.INDEX_SECOND_EMPLOYEE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    private Model model \u003d new ModelManager(getTypicalEmployeeTracker(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        Employee employeeToDelete \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EMPLOYEE);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EMPLOYEE_SUCCESS, employeeToDelete);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getEmployeeTracker(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        expectedModel.deleteEmployee(employeeToDelete);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEmployeeList().size() + 1);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"        Employee employeeToDelete \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EMPLOYEE);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EMPLOYEE_SUCCESS, employeeToDelete);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"        Model expectedModel \u003d new ModelManager(model.getEmployeeTracker(), new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"        expectedModel.deleteEmployee(employeeToDelete);"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"        showNoEmployee(expectedModel);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_EMPLOYEE;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEmployeeTracker().getEmployeeList().size());"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_EMPLOYEE);"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_EMPLOYEE);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_EMPLOYEE);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"        // different employee -\u003e returns false"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"    private void showNoEmployee(Model model) {"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"        model.updateFilteredEmployeeList(p -\u003e false);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"        assertTrue(model.getFilteredEmployeeList().isEmpty());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":39,"-":70}},{"path":"src/test/java/employeetracker/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.showEmployeeAtIndex;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.getTypicalEmployeeTracker;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalIndexes.INDEX_SECOND_EMPLOYEE;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.EditCommand.EditEmployeeDescriptor;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.EmployeeTracker;"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"import employeetracker.testutil.EditEmployeeDescriptorBuilder;"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"import employeetracker.testutil.EmployeeBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    private Model model \u003d new ModelManager(getTypicalEmployeeTracker(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"        Employee editedEmployee \u003d new EmployeeBuilder().build();"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder(editedEmployee).build();"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EMPLOYEE, descriptor);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        Model expectedModel \u003d new ModelManager(new EmployeeTracker(model.getEmployeeTracker()), new UserPrefs());"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"        expectedModel.setEmployee(model.getFilteredEmployeeList().get(0), editedEmployee);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredEmployeeList().size());"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"        Employee lastEmployee \u003d model.getFilteredEmployeeList().get(indexLastPerson.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        EmployeeBuilder personInList \u003d new EmployeeBuilder(lastEmployee);"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        Employee editedEmployee \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"        EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        Model expectedModel \u003d new ModelManager(new EmployeeTracker(model.getEmployeeTracker()), new UserPrefs());"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"        expectedModel.setEmployee(lastEmployee, editedEmployee);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EMPLOYEE, new EditEmployeeDescriptor());"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"        Employee editedEmployee \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased());"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"        Model expectedModel \u003d new ModelManager(new EmployeeTracker(model.getEmployeeTracker()), new UserPrefs());"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"        Employee employeeInFilteredList \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased());"},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"        Employee editedEmployee \u003d new EmployeeBuilder(employeeInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EMPLOYEE,"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"                new EditEmployeeDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EMPLOYEE_SUCCESS, editedEmployee);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":"        Model expectedModel \u003d new ModelManager(new EmployeeTracker(model.getEmployeeTracker()), new UserPrefs());"},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"        expectedModel.setEmployee(model.getFilteredEmployeeList().get(0), editedEmployee);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"    public void execute_duplicateEmployeeUnfilteredList_failure() {"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"        Employee firstEmployee \u003d model.getFilteredEmployeeList().get(INDEX_FIRST_EMPLOYEE.getZeroBased());"},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"        EditCommand.EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder(firstEmployee).build();"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_EMPLOYEE, descriptor);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":"    public void execute_duplicateEmployeeFilteredList_failure() {"},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"        // edit employee in filtered list into a duplicate in Employee Tracker"},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"        Employee employeeInList \u003d model.getEmployeeTracker().getEmployeeList()"},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":"                .get(INDEX_SECOND_EMPLOYEE.getZeroBased());"},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EMPLOYEE,"},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":"                new EditEmployeeDescriptorBuilder(employeeInList).build());"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EMPLOYEE);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"    public void execute_invalidEmployeeIndexUnfilteredList_failure() {"},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEmployeeList().size() + 1);"},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":"        EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"e0260222"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":134,"author":{"gitId":"e0260222"},"content":"     * but smaller than size of Employee Tracker"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"e0260222"},"content":"    public void execute_invalidEmployeeIndexFilteredList_failure() {"},{"lineNumber":138,"author":{"gitId":"e0260222"},"content":"        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":139,"author":{"gitId":"e0260222"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_EMPLOYEE;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":141,"author":{"gitId":"e0260222"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getEmployeeTracker().getEmployeeList().size());"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":144,"author":{"gitId":"e0260222"},"content":"                new EditEmployeeDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"e0260222"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EMPLOYEE_DISPLAYED_INDEX);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":151,"author":{"gitId":"e0260222"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_EMPLOYEE, DESC_AMY);"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":154,"author":{"gitId":"e0260222"},"content":"        EditEmployeeDescriptor copyDescriptor \u003d new EditCommand.EditEmployeeDescriptor(DESC_AMY);"},{"lineNumber":155,"author":{"gitId":"e0260222"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_EMPLOYEE, copyDescriptor);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":168,"author":{"gitId":"e0260222"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_EMPLOYEE, DESC_AMY)));"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":171,"author":{"gitId":"e0260222"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_EMPLOYEE, DESC_BOB)));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":80,"-":94}},{"path":"src/test/java/employeetracker/logic/commands/EditEmployeeDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.testutil.EditEmployeeDescriptorBuilder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"public class EditEmployeeDescriptorTest {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"        EditCommand.EditEmployeeDescriptor descriptorWithSameValues \u003d new EditCommand.EditEmployeeDescriptor(DESC_AMY);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"        EditCommand.EditEmployeeDescriptor editedAmy \u003d new EditEmployeeDescriptorBuilder(DESC_AMY)"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"                .withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        editedAmy \u003d new EditEmployeeDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"        editedAmy \u003d new EditEmployeeDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        editedAmy \u003d new EditEmployeeDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"        editedAmy \u003d new EditEmployeeDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":19,"-":39}},{"path":"src/test/java/employeetracker/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":5,"-":15}},{"path":"src/test/java/employeetracker/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_EMPLOYEES_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.testutil.TypicalEmployees.CARL;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.testutil.TypicalEmployees.ELLE;"},{"lineNumber":7,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.testutil.TypicalEmployees.FIONA;"},{"lineNumber":8,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.testutil.TypicalEmployees.getTypicalEmployeeTracker;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"import employeetracker.model.Model;"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"import employeetracker.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"import employeetracker.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"import employeetracker.model.employee.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"    private Model model \u003d new ModelManager(getTypicalEmployeeTracker(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalEmployeeTracker(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"    private String findBy;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"), findBy);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":36,"author":{"gitId":"dgc5213"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"), findBy);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"dgc5213"},"content":"        // different employee -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"dgc5213"},"content":"    public void execute_zeroKeywords_noEmployeeFound() {"},{"lineNumber":60,"author":{"gitId":"dgc5213"},"content":"        String expectedMessage \u003d String.format(MESSAGE_EMPLOYEES_LISTED_OVERVIEW, 0);"},{"lineNumber":61,"author":{"gitId":"dgc5213"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("},{"lineNumber":62,"author":{"gitId":"dgc5213"},"content":"                Collections.emptyList(), \"n/\");"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":64,"author":{"gitId":"dgc5213"},"content":"        expectedModel.updateFilteredEmployeeList(predicate);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":66,"author":{"gitId":"dgc5213"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredEmployeeList());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"dgc5213"},"content":"    public void execute_multipleKeywords_multipleEmployeesFound() {"},{"lineNumber":71,"author":{"gitId":"dgc5213"},"content":"        String expectedMessage \u003d String.format(MESSAGE_EMPLOYEES_LISTED_OVERVIEW, 3);"},{"lineNumber":72,"author":{"gitId":"dgc5213"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("},{"lineNumber":73,"author":{"gitId":"dgc5213"},"content":"                Arrays.asList(\"Kurz\", \"Elle\", \"Kunz\"), \"n/\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":75,"author":{"gitId":"dgc5213"},"content":"        expectedModel.updateFilteredEmployeeList(predicate);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":77,"author":{"gitId":"dgc5213"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredEmployeeList());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":84,"author":{"gitId":"dgc5213"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), findBy);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dgc5213":30,"-":56}},{"path":"src/test/java/employeetracker/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":5,"-":15}},{"path":"src/test/java/employeetracker/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.showEmployeeAtIndex;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.getTypicalEmployeeTracker;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        model \u003d new ModelManager(getTypicalEmployeeTracker(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"        expectedModel \u003d new ModelManager(model.getEmployeeTracker(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        showEmployeeAtIndex(model, INDEX_FIRST_EMPLOYEE);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":11,"-":28}},{"path":"src/test/java/employeetracker/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.DATE_OF_BIRTH_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.DATE_OF_JOINING_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.DATE_OF_JOINING_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.ROLE_DESC_BOB;"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.SALARY_DESC_AMY;"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.SALARY_DESC_BOB;"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.AMY;"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.BOB;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.AddCommand;"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Address;"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Email;"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Name;"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Phone;"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.tag.Tag;"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"import employeetracker.testutil.EmployeeBuilder;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        Employee expectedEmployee \u003d new EmployeeBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + ROLE_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"                + SALARY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedEmployee));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + ROLE_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"                + SALARY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedEmployee));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + ROLE_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"                + DATE_OF_JOINING_DESC_BOB + SALARY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedEmployee));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + ROLE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"                + SALARY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedEmployee));"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + ROLE_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"                + DATE_OF_JOINING_DESC_BOB + SALARY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedEmployee));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"        Employee expectedEmployeeMultipleTags \u003d new EmployeeBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + ROLE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"                + SALARY_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedEmployeeMultipleTags));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"        Employee expectedEmployee \u003d new EmployeeBuilder(AMY).withTags().build();"},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + ROLE_DESC_BOB + ROLE_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + DATE_OF_BIRTH_DESC_AMY + DATE_OF_JOINING_DESC_AMY"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"                + SALARY_DESC_AMY, new AddCommand(expectedEmployee));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":"                + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB + SALARY_DESC_BOB,"},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"                expectedMessage);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ROLE_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":"                + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB + SALARY_DESC_BOB,"},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"                expectedMessage);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ROLE_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":"                + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB + SALARY_DESC_BOB,"},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"                expectedMessage);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ROLE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"                + VALID_ADDRESS_BOB + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB + SALARY_DESC_BOB,"},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":"                expectedMessage);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + ROLE_DESC_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":"                + VALID_ADDRESS_BOB + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB + SALARY_DESC_BOB,"},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":"                expectedMessage);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + ROLE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":134,"author":{"gitId":"e0260222"},"content":"                + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB + SALARY_DESC_BOB"},{"lineNumber":135,"author":{"gitId":"e0260222"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":138,"author":{"gitId":"e0260222"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ROLE_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"},{"lineNumber":139,"author":{"gitId":"e0260222"},"content":"                + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB + SALARY_DESC_BOB"},{"lineNumber":140,"author":{"gitId":"e0260222"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":143,"author":{"gitId":"e0260222"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ROLE_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":144,"author":{"gitId":"e0260222"},"content":"                + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB + SALARY_DESC_BOB"},{"lineNumber":145,"author":{"gitId":"e0260222"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":148,"author":{"gitId":"e0260222"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ROLE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":149,"author":{"gitId":"e0260222"},"content":"                + INVALID_ADDRESS_DESC + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB + SALARY_DESC_BOB"},{"lineNumber":150,"author":{"gitId":"e0260222"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":153,"author":{"gitId":"e0260222"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + ROLE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":154,"author":{"gitId":"e0260222"},"content":"                + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB + SALARY_DESC_BOB"},{"lineNumber":155,"author":{"gitId":"e0260222"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":158,"author":{"gitId":"e0260222"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + ROLE_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":159,"author":{"gitId":"e0260222"},"content":"                + INVALID_ADDRESS_DESC + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB + SALARY_DESC_BOB,"},{"lineNumber":160,"author":{"gitId":"e0260222"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":163,"author":{"gitId":"e0260222"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + ROLE_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":164,"author":{"gitId":"e0260222"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + DATE_OF_BIRTH_DESC_BOB + DATE_OF_JOINING_DESC_BOB"},{"lineNumber":165,"author":{"gitId":"e0260222"},"content":"                + SALARY_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":166,"author":{"gitId":"e0260222"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":108,"-":61}},{"path":"src/test/java/employeetracker/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":149}},{"path":"src/test/java/employeetracker/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            parser.parse(userInput);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":35}},{"path":"src/test/java/employeetracker/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_EMPLOYEE));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":7,"-":25}},{"path":"src/test/java/employeetracker/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalIndexes.INDEX_SECOND_EMPLOYEE;"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalIndexes.INDEX_THIRD_EMPLOYEE;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.EditCommand.EditEmployeeDescriptor;"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Address;"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Email;"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Name;"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Phone;"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.tag.Tag;"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"import employeetracker.testutil.EditEmployeeDescriptorBuilder;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Employee} being edited,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"        Index targetIndex \u003d INDEX_SECOND_EMPLOYEE;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"        EditCommand.EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"        Index targetIndex \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":"        EditCommand.EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":137,"author":{"gitId":"e0260222"},"content":"        Index targetIndex \u003d INDEX_THIRD_EMPLOYEE;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":139,"author":{"gitId":"e0260222"},"content":"        EditCommand.EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder()"},{"lineNumber":140,"author":{"gitId":"e0260222"},"content":"                .withName(VALID_NAME_AMY).build();"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":146,"author":{"gitId":"e0260222"},"content":"        descriptor \u003d new EditEmployeeDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":152,"author":{"gitId":"e0260222"},"content":"        descriptor \u003d new EditEmployeeDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":158,"author":{"gitId":"e0260222"},"content":"        descriptor \u003d new EditEmployeeDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":164,"author":{"gitId":"e0260222"},"content":"        descriptor \u003d new EditEmployeeDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":171,"author":{"gitId":"e0260222"},"content":"        Index targetIndex \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"e0260222"},"content":"        EditCommand.EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":187,"author":{"gitId":"e0260222"},"content":"        Index targetIndex \u003d INDEX_FIRST_EMPLOYEE;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":189,"author":{"gitId":"e0260222"},"content":"        EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":196,"author":{"gitId":"e0260222"},"content":"        descriptor \u003d new EditEmployeeDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":204,"author":{"gitId":"e0260222"},"content":"        Index targetIndex \u003d INDEX_THIRD_EMPLOYEE;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"e0260222"},"content":"        EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder().withTags().build();"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":59,"-":153}},{"path":"src/test/java/employeetracker/logic/parser/EmployeeTrackerParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"import employeetracker.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"import employeetracker.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"import employeetracker.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"import employeetracker.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"dgc5213"},"content":"import employeetracker.logic.commands.EditCommand.EditEmployeeDescriptor;"},{"lineNumber":21,"author":{"gitId":"dgc5213"},"content":"import employeetracker.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"dgc5213"},"content":"import employeetracker.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"import employeetracker.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"import employeetracker.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"import employeetracker.model.employee.NameContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":"import employeetracker.testutil.EditEmployeeDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"import employeetracker.testutil.EmployeeBuilder;"},{"lineNumber":30,"author":{"gitId":"dgc5213"},"content":"import employeetracker.testutil.EmployeeUtil;"},{"lineNumber":31,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":"public class EmployeeTrackerParserTest {"},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":34,"author":{"gitId":"dgc5213"},"content":"    private final EmployeeTrackerParser parser \u003d new EmployeeTrackerParser();"},{"lineNumber":35,"author":{"gitId":"dgc5213"},"content":"    private String findBy;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":39,"author":{"gitId":"dgc5213"},"content":"        Employee employee \u003d new EmployeeBuilder().build();"},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(EmployeeUtil.getAddCommand(employee));"},{"lineNumber":41,"author":{"gitId":"dgc5213"},"content":"        assertEquals(new AddCommand(employee), command);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":53,"author":{"gitId":"dgc5213"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EMPLOYEE.getOneBased());"},{"lineNumber":54,"author":{"gitId":"dgc5213"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_EMPLOYEE), command);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":59,"author":{"gitId":"dgc5213"},"content":"        Employee employee \u003d new EmployeeBuilder().build();"},{"lineNumber":60,"author":{"gitId":"dgc5213"},"content":"        EditEmployeeDescriptor descriptor \u003d new EditEmployeeDescriptorBuilder(employee).build();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":62,"author":{"gitId":"dgc5213"},"content":"                + INDEX_FIRST_EMPLOYEE.getOneBased() + \" \" + EmployeeUtil.getEditEmployeeDescriptorDetails(descriptor));"},{"lineNumber":63,"author":{"gitId":"dgc5213"},"content":"        EditCommand command2 \u003d new EditCommand(INDEX_FIRST_EMPLOYEE, descriptor);"},{"lineNumber":64,"author":{"gitId":"dgc5213"},"content":"        assertEquals(command2, command);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":77,"author":{"gitId":"dgc5213"},"content":"                FindCommand.COMMAND_WORD + \" n/ \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":78,"author":{"gitId":"dgc5213"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords, \"n/\")), command);"},{"lineNumber":79,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dgc5213":38,"-":66}},{"path":"src/test/java/employeetracker/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"dgc5213"},"content":"import employeetracker.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"import employeetracker.model.employee.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":27,"author":{"gitId":"dgc5213"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"), \"n/\"));"},{"lineNumber":28,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"        assertParseSuccess(parser, \"find n/ Alice Bob\", expectedFindCommand);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":"        assertParseSuccess(parser, \"find n/  Alice      Bob  \\t\", expectedFindCommand);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dgc5213":10,"-":25}},{"path":"src/test/java/employeetracker/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalIndexes.INDEX_FIRST_EMPLOYEE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Address;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Email;"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Name;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Phone;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"        assertEquals(INDEX_FIRST_EMPLOYEE, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        assertEquals(INDEX_FIRST_EMPLOYEE, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":12,"-":184}},{"path":"src/test/java/employeetracker/model/EmployeeTrackerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.ALICE;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.getTypicalEmployeeTracker;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"import employeetracker.testutil.EmployeeBuilder;"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"public class EmployeeTrackerTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    private final EmployeeTracker employeeTracker \u003d new EmployeeTracker();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"        assertEquals(Collections.emptyList(), employeeTracker.getEmployeeList());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"        assertThrows(NullPointerException.class, () -\u003e employeeTracker.resetData(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    public void resetData_withValidReadOnlyEmployeeTracker_replacesData() {"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"        EmployeeTracker newData \u003d getTypicalEmployeeTracker();"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        employeeTracker.resetData(newData);"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        assertEquals(newData, employeeTracker);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    public void resetData_withDuplicateEmployees_throwsDuplicateEmployeeException() {"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"        // Two employees with the same identity fields"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"        Employee editedAlice \u003d new EmployeeBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        List\u003cEmployee\u003e newEmployees \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"        EmployeeTrackerStub newData \u003d new EmployeeTrackerStub(newEmployees);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"        assertThrows(DuplicateEmployeeException.class, () -\u003e employeeTracker.resetData(newData));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"    public void hasEmployee_nullEmployee_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"        assertThrows(NullPointerException.class, () -\u003e employeeTracker.hasEmployee(null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"    public void hasEmployee_employeeNotInEmployeeTracker_returnsFalse() {"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"        assertFalse(employeeTracker.hasEmployee(ALICE));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"    public void hasEmployee_employeeInEmployeeTracker_returnsTrue() {"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"        employeeTracker.addEmployee(ALICE);"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"        assertTrue(employeeTracker.hasEmployee(ALICE));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"    public void hasEmployee_employeeWithSameIdentityFieldsInEmployeeTracker_returnsTrue() {"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"        employeeTracker.addEmployee(ALICE);"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"        Employee editedAlice \u003d new EmployeeBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"        assertTrue(employeeTracker.hasEmployee(editedAlice));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"    public void getEmployeeList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e employeeTracker.getEmployeeList().remove(0));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"     * A stub ReadOnlyEmployeeTracker whose employees list can violate interface constraints."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"    private static class EmployeeTrackerStub implements ReadOnlyEmployeeTracker {"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"        private final ObservableList\u003cEmployee\u003e employees \u003d FXCollections.observableArrayList();"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"        EmployeeTrackerStub(Collection\u003cEmployee\u003e employees) {"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"            this.employees.setAll(employees);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"        public ObservableList\u003cEmployee\u003e getEmployeeList() {"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"            return employees;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":48,"-":54}},{"path":"src/test/java/employeetracker/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package employeetracker.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.model.Model.PREDICATE_SHOW_ALL_EMPLOYEES;"},{"lineNumber":4,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.testutil.TypicalEmployees.ALICE;"},{"lineNumber":6,"author":{"gitId":"dgc5213"},"content":"import static employeetracker.testutil.TypicalEmployees.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":"import employeetracker.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"dgc5213"},"content":"import employeetracker.model.employee.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"dgc5213"},"content":"import employeetracker.testutil.EmployeeTrackerBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":29,"author":{"gitId":"dgc5213"},"content":"        assertEquals(new EmployeeTracker(), new EmployeeTracker(modelManager.getEmployeeTracker()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"dgc5213"},"content":"        userPrefs.setEmployeeTrackerFilePath(Paths.get(\"employeetracker/file/path\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"dgc5213"},"content":"        userPrefs.setEmployeeTrackerFilePath(Paths.get(\"new/employeetracker/file/path\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"dgc5213"},"content":"    public void setEmployeeTrackerFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"dgc5213"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setEmployeeTrackerFilePath(null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"dgc5213"},"content":"    public void setEmployeeTrackerFilePath_validPath_setsEmployeeTrackerFilePath() {"},{"lineNumber":70,"author":{"gitId":"dgc5213"},"content":"        Path path \u003d Paths.get(\"employeetracker/file/path\");"},{"lineNumber":71,"author":{"gitId":"dgc5213"},"content":"        modelManager.setEmployeeTrackerFilePath(path);"},{"lineNumber":72,"author":{"gitId":"dgc5213"},"content":"        assertEquals(path, modelManager.getEmployeeTrackerFilePath());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"dgc5213"},"content":"    public void hasEmployee_nullEmployee_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"dgc5213"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasEmployee(null));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"dgc5213"},"content":"    public void hasEmployee_employeeNotInEmployeeTracker_returnsFalse() {"},{"lineNumber":82,"author":{"gitId":"dgc5213"},"content":"        assertFalse(modelManager.hasEmployee(ALICE));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"dgc5213"},"content":"    public void hasEmployee_employeeInEmployeeTracker_returnsTrue() {"},{"lineNumber":87,"author":{"gitId":"dgc5213"},"content":"        modelManager.addEmployee(ALICE);"},{"lineNumber":88,"author":{"gitId":"dgc5213"},"content":"        assertTrue(modelManager.hasEmployee(ALICE));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"dgc5213"},"content":"    public void getFilteredEmployeeList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"dgc5213"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredEmployeeList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":98,"author":{"gitId":"dgc5213"},"content":"        EmployeeTracker employeeTracker \u003d new EmployeeTrackerBuilder().withEmployee(ALICE).withEmployee(BENSON).build();"},{"lineNumber":99,"author":{"gitId":"dgc5213"},"content":"        EmployeeTracker differentEmployeeTracker \u003d new EmployeeTracker();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitId":"dgc5213"},"content":"        modelManager \u003d new ModelManager(employeeTracker, userPrefs);"},{"lineNumber":104,"author":{"gitId":"dgc5213"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(employeeTracker, userPrefs);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":117,"author":{"gitId":"dgc5213"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentEmployeeTracker, userPrefs)));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":121,"author":{"gitId":"dgc5213"},"content":"        modelManager.updateFilteredEmployeeList(new NameContainsKeywordsPredicate(Arrays.asList(keywords), \"n/\"));"},{"lineNumber":122,"author":{"gitId":"dgc5213"},"content":"        assertFalse(modelManager.equals(new ModelManager(employeeTracker, userPrefs)));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":125,"author":{"gitId":"dgc5213"},"content":"        modelManager.updateFilteredEmployeeList(PREDICATE_SHOW_ALL_EMPLOYEES);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":129,"author":{"gitId":"dgc5213"},"content":"        differentUserPrefs.setEmployeeTrackerFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":130,"author":{"gitId":"dgc5213"},"content":"        assertFalse(modelManager.equals(new ModelManager(employeeTracker, differentUserPrefs)));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dgc5213":36,"-":96}},{"path":"src/test/java/employeetracker/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"    public void setEmployeeTrackerFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setEmployeeTrackerFilePath(null));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":4,"-":17}},{"path":"src/test/java/employeetracker/model/employee/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":34}},{"path":"src/test/java/employeetracker/model/employee/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // valid email"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":59}},{"path":"src/test/java/employeetracker/model/employee/EmployeeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.ALICE;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.BOB;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.testutil.EmployeeBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"public class EmployeeTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"        Employee employee \u003d new EmployeeBuilder().build();"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e employee.getTags().remove(0));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    public void isSameEmployee() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        assertTrue(ALICE.isSameEmployee(ALICE));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"        assertFalse(ALICE.isSameEmployee(null));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        Employee editedAlice \u003d new EmployeeBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        assertTrue(ALICE.isSameEmployee(editedAlice));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        editedAlice \u003d new EmployeeBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"        assertFalse(ALICE.isSameEmployee(editedAlice));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        Employee editedBob \u003d new EmployeeBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        assertFalse(BOB.isSameEmployee(editedBob));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"        editedBob \u003d new EmployeeBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"        assertFalse(BOB.isSameEmployee(editedBob));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        Employee aliceCopy \u003d new EmployeeBuilder(ALICE).build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"        // different employee -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"        Employee editedAlice \u003d new EmployeeBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"        editedAlice \u003d new EmployeeBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"        editedAlice \u003d new EmployeeBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"        editedAlice \u003d new EmployeeBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"        editedAlice \u003d new EmployeeBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":33,"-":58}},{"path":"src/test/java/employeetracker/model/employee/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"dgc5213"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"dgc5213"},"content":"import employeetracker.testutil.EmployeeBuilder;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"dgc5213"},"content":"    private String findBy;"},{"lineNumber":17,"author":{"gitId":"dgc5213"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"dgc5213"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate("},{"lineNumber":24,"author":{"gitId":"dgc5213"},"content":"                firstPredicateKeywordList, findBy);"},{"lineNumber":25,"author":{"gitId":"dgc5213"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate("},{"lineNumber":26,"author":{"gitId":"dgc5213"},"content":"                secondPredicateKeywordList, findBy);"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":32,"author":{"gitId":"dgc5213"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate("},{"lineNumber":33,"author":{"gitId":"dgc5213"},"content":"                firstPredicateKeywordList, findBy);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"dgc5213"},"content":"        // different employee -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":49,"author":{"gitId":"dgc5213"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate("},{"lineNumber":50,"author":{"gitId":"dgc5213"},"content":"                Collections.singletonList(\"Alice\"), \"n/\");"},{"lineNumber":51,"author":{"gitId":"dgc5213"},"content":"        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":54,"author":{"gitId":"dgc5213"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"), \"n/\");"},{"lineNumber":55,"author":{"gitId":"dgc5213"},"content":"        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":58,"author":{"gitId":"dgc5213"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"), \"n/\");"},{"lineNumber":59,"author":{"gitId":"dgc5213"},"content":"        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":62,"author":{"gitId":"dgc5213"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"), \"n/\");"},{"lineNumber":63,"author":{"gitId":"dgc5213"},"content":"        assertTrue(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":69,"author":{"gitId":"dgc5213"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList(), \"n/\");"},{"lineNumber":70,"author":{"gitId":"dgc5213"},"content":"        assertFalse(predicate.test(new EmployeeBuilder().withName(\"Alice\").build()));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":73,"author":{"gitId":"dgc5213"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"), \"n/\");"},{"lineNumber":74,"author":{"gitId":"dgc5213"},"content":"        assertFalse(predicate.test(new EmployeeBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":77,"author":{"gitId":"dgc5213"},"content":"        predicate \u003d new NameContainsKeywordsPredicate("},{"lineNumber":78,"author":{"gitId":"dgc5213"},"content":"                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"), \"n/\");"},{"lineNumber":79,"author":{"gitId":"dgc5213"},"content":"        assertFalse(predicate.test(new EmployeeBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"dgc5213":27,"-":55}},{"path":"src/test/java/employeetracker/model/employee/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":38}},{"path":"src/test/java/employeetracker/model/employee/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":38}},{"path":"src/test/java/employeetracker/model/employee/UniqueEmployeeListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.employee;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.ALICE;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.BOB;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.exceptions.DuplicateEmployeeException;"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.exceptions.EmployeeNotFoundException;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import employeetracker.testutil.EmployeeBuilder;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"public class UniqueEmployeeListTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    private final UniqueEmployeeList uniqueEmployeeList \u003d new UniqueEmployeeList();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    public void contains_nullEmployee_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEmployeeList.contains(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public void contains_employeeNotInList_returnsFalse() {"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"        assertFalse(uniqueEmployeeList.contains(ALICE));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"    public void contains_employeeInList_returnsTrue() {"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.add(ALICE);"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"        assertTrue(uniqueEmployeeList.contains(ALICE));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"    public void contains_employeeWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.add(ALICE);"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        Employee editedAlice \u003d new EmployeeBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"        assertTrue(uniqueEmployeeList.contains(editedAlice));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"    public void add_nullEmployee_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEmployeeList.add(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"    public void add_duplicateEmployee_throwsDuplicateEmployeeException() {"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.add(ALICE);"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"        assertThrows(DuplicateEmployeeException.class, () -\u003e uniqueEmployeeList.add(ALICE));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"    public void setEmployee_nullTargetEmployee_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEmployeeList.setEmployee(null, ALICE));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"    public void setEmployee_nullEditedEmployee_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEmployeeList.setEmployee(ALICE, null));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"    public void setEmployee_targetEmployeeNotInList_throwsEmployeeNotFoundException() {"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"        assertThrows(EmployeeNotFoundException.class, () -\u003e uniqueEmployeeList.setEmployee(ALICE, ALICE));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"    public void setEmployee_editedEmployeeIsSameEmployee_success() {"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.add(ALICE);"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.setEmployee(ALICE, ALICE);"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"        expectedUniqueEmployeeList.add(ALICE);"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"    public void setEmployee_editedEmployeeHasSameIdentity_success() {"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.add(ALICE);"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":"        Employee editedAlice \u003d new EmployeeBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.setEmployee(ALICE, editedAlice);"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"        expectedUniqueEmployeeList.add(editedAlice);"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"    public void setEmployee_editedEmployeeHasDifferentIdentity_success() {"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.add(ALICE);"},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.setEmployee(ALICE, BOB);"},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":"        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":"        expectedUniqueEmployeeList.add(BOB);"},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":"    public void setEmployee_editedEmployeeHasNonUniqueIdentity_throwsDuplicateEmployeeException() {"},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.add(ALICE);"},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.add(BOB);"},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":"        assertThrows(DuplicateEmployeeException.class, () -\u003e uniqueEmployeeList.setEmployee(ALICE, BOB));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"    public void remove_nullEmployee_throwsNullPointerException() {"},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEmployeeList.remove(null));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":"    public void remove_employeeDoesNotExist_throwsEmployeeNotFoundException() {"},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":"        assertThrows(EmployeeNotFoundException.class, () -\u003e uniqueEmployeeList.remove(ALICE));"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":"    public void remove_existingEmployee_removesEmployee() {"},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.add(ALICE);"},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.remove(ALICE);"},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":"        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":"        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"e0260222"},"content":"    public void setEmployees_nullUniqueEmployeeList_throwsNullPointerException() {"},{"lineNumber":132,"author":{"gitId":"e0260222"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEmployeeList.setEmployees((UniqueEmployeeList) null));"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"e0260222"},"content":"    public void setEmployees_uniqueEmployeeList_replacesOwnListWithProvidedUniqueEmployeeList() {"},{"lineNumber":137,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.add(ALICE);"},{"lineNumber":138,"author":{"gitId":"e0260222"},"content":"        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"},{"lineNumber":139,"author":{"gitId":"e0260222"},"content":"        expectedUniqueEmployeeList.add(BOB);"},{"lineNumber":140,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.setEmployees(expectedUniqueEmployeeList);"},{"lineNumber":141,"author":{"gitId":"e0260222"},"content":"        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"e0260222"},"content":"    public void setEmployees_nullList_throwsNullPointerException() {"},{"lineNumber":146,"author":{"gitId":"e0260222"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEmployeeList.setEmployees((List\u003cEmployee\u003e) null));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"e0260222"},"content":"    public void setEmployees_list_replacesOwnListWithProvidedList() {"},{"lineNumber":151,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.add(ALICE);"},{"lineNumber":152,"author":{"gitId":"e0260222"},"content":"        List\u003cEmployee\u003e employeeList \u003d Collections.singletonList(BOB);"},{"lineNumber":153,"author":{"gitId":"e0260222"},"content":"        uniqueEmployeeList.setEmployees(employeeList);"},{"lineNumber":154,"author":{"gitId":"e0260222"},"content":"        UniqueEmployeeList expectedUniqueEmployeeList \u003d new UniqueEmployeeList();"},{"lineNumber":155,"author":{"gitId":"e0260222"},"content":"        expectedUniqueEmployeeList.add(BOB);"},{"lineNumber":156,"author":{"gitId":"e0260222"},"content":"        assertEquals(expectedUniqueEmployeeList, uniqueEmployeeList);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"e0260222"},"content":"    public void setEmployees_listWithDuplicateEmployees_throwsDuplicateEmployeeException() {"},{"lineNumber":161,"author":{"gitId":"e0260222"},"content":"        List\u003cEmployee\u003e listWithDuplicateEmployees \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":162,"author":{"gitId":"e0260222"},"content":"        assertThrows(DuplicateEmployeeException.class, () -\u003e uniqueEmployeeList"},{"lineNumber":163,"author":{"gitId":"e0260222"},"content":"                .setEmployees(listWithDuplicateEmployees));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":169,"author":{"gitId":"e0260222"},"content":"            -\u003e uniqueEmployeeList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":90,"-":81}},{"path":"src/test/java/employeetracker/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.model.tag;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":2,"-":24}},{"path":"src/test/java/employeetracker/storage/JsonAdaptedEmployeeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.storage.JsonAdaptedEmployee.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.BENSON;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Address;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfBirth;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfJoining;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Email;"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Name;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"public class JsonAdaptedEmployeeTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    private static final String INVALID_DATE_OF_BIRTH \u003d \"30-12-1999\";"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    private static final String INVALID_DATE_OF_JOINING \u003d \"30-12-2019\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    private static final String VALID_ROLE \u003d BENSON.getRole().toString();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"    private static final String VALID_DATE_OF_BIRTH \u003d BENSON.getDateOfBirth().toString();"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"    private static final String VALID_DATE_OF_JOINING \u003d BENSON.getDateOfJoining().toString();"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    private static final String VALID_SALARY \u003d BENSON.getSalary().toString();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"    public void toModelType_validEmployeeDetails_returnsEmployee() throws Exception {"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(BENSON);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(INVALID_NAME, VALID_ROLE, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"                VALID_ADDRESS, VALID_DATE_OF_BIRTH, VALID_DATE_OF_JOINING, VALID_SALARY, VALID_TAGS);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(null, VALID_ROLE, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"                VALID_ADDRESS, VALID_DATE_OF_BIRTH, VALID_DATE_OF_JOINING, VALID_SALARY, VALID_TAGS);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(VALID_NAME, VALID_ROLE, INVALID_PHONE, VALID_EMAIL,"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"                VALID_ADDRESS, VALID_DATE_OF_BIRTH, VALID_DATE_OF_JOINING, VALID_SALARY, VALID_TAGS);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(VALID_NAME, VALID_ROLE, null, VALID_EMAIL,"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"                VALID_ADDRESS, VALID_DATE_OF_BIRTH, VALID_DATE_OF_JOINING, VALID_SALARY, VALID_TAGS);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(VALID_NAME, VALID_ROLE, VALID_PHONE, INVALID_EMAIL,"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"                VALID_ADDRESS, VALID_DATE_OF_BIRTH, VALID_DATE_OF_JOINING, VALID_SALARY, VALID_TAGS);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(VALID_NAME, VALID_ROLE, VALID_PHONE, null,"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"                VALID_ADDRESS, VALID_DATE_OF_BIRTH, VALID_DATE_OF_JOINING, VALID_SALARY, VALID_TAGS);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(VALID_NAME, VALID_ROLE, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":"                INVALID_ADDRESS, VALID_DATE_OF_BIRTH, VALID_DATE_OF_JOINING, VALID_SALARY, VALID_TAGS);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(VALID_NAME, VALID_ROLE, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"                null, VALID_DATE_OF_BIRTH, VALID_DATE_OF_JOINING, VALID_SALARY, VALID_TAGS);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":"    public void toModelType_invalidDateOfBirth_throwsIllegalValueException() {"},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(VALID_NAME, VALID_ROLE, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":"                VALID_ADDRESS, INVALID_DATE_OF_BIRTH, VALID_DATE_OF_JOINING, VALID_SALARY, VALID_TAGS);"},{"lineNumber":117,"author":{"gitId":"e0260222"},"content":"        String expectedMessage \u003d DateOfBirth.MESSAGE_CONSTRAINTS;"},{"lineNumber":118,"author":{"gitId":"e0260222"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":"    public void toModelType_nullDateOfBirth_throwsIllegalValueException() {"},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":"        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(VALID_NAME, VALID_ROLE, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"                VALID_ADDRESS, null, VALID_DATE_OF_JOINING, VALID_SALARY, VALID_TAGS);"},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateOfBirth.class.getSimpleName());"},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":129,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"e0260222"},"content":"    public void toModelType_invalidDateOfJoining_throwsIllegalValueException() {"},{"lineNumber":131,"author":{"gitId":"e0260222"},"content":"        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(VALID_NAME, VALID_ROLE, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":132,"author":{"gitId":"e0260222"},"content":"                VALID_ADDRESS, VALID_DATE_OF_BIRTH, INVALID_DATE_OF_JOINING, VALID_SALARY, VALID_TAGS);"},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":"        String expectedMessage \u003d DateOfJoining.MESSAGE_CONSTRAINTS;"},{"lineNumber":134,"author":{"gitId":"e0260222"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":135,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":137,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"e0260222"},"content":"    public void toModelType_nullDateOfJoining_throwsIllegalValueException() {"},{"lineNumber":139,"author":{"gitId":"e0260222"},"content":"        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(VALID_NAME, VALID_ROLE, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":140,"author":{"gitId":"e0260222"},"content":"                VALID_ADDRESS, VALID_DATE_OF_BIRTH, null, VALID_SALARY, VALID_TAGS);"},{"lineNumber":141,"author":{"gitId":"e0260222"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateOfJoining.class.getSimpleName());"},{"lineNumber":142,"author":{"gitId":"e0260222"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":143,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":149,"author":{"gitId":"e0260222"},"content":"        JsonAdaptedEmployee person \u003d new JsonAdaptedEmployee(VALID_NAME, VALID_ROLE, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":150,"author":{"gitId":"e0260222"},"content":"                VALID_ADDRESS, VALID_DATE_OF_BIRTH, VALID_DATE_OF_JOINING, VALID_SALARY, invalidTags);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":72,"-":82}},{"path":"src/test/java/employeetracker/storage/JsonEmployeeTrackerStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.storage;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.ALICE;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.HOON;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.IDA;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.getTypicalEmployeeTracker;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.EmployeeTracker;"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyEmployeeTracker;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"public class JsonEmployeeTrackerStorageTest {"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonEmployeeTrackerStorageTest\");"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    @TempDir"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    public Path testFolder;"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    public void readEmployeeTracker_nullFilePath_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"        assertThrows(NullPointerException.class, () -\u003e readEmployeeTracker(null));"},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"    private java.util.Optional\u003cReadOnlyEmployeeTracker\u003e readEmployeeTracker(String filePath) throws Exception {"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"        return new JsonEmployeeTrackerStorage(Paths.get(filePath))"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"                .readEmployeeTracker(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"                : null;"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"        assertFalse(readEmployeeTracker(\"NonExistentFile.json\").isPresent());"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        assertThrows(DataConversionException.class, () -\u003e readEmployeeTracker(\"notJsonFormat.json\"));"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"    public void readEmployeeTracker_invalidEmployee_throwDataConversionException() {"},{"lineNumber":56,"author":{"gitId":"e0260222"},"content":"        assertThrows(DataConversionException.class, () -\u003e readEmployeeTracker(\"invalidEmployee.json\"));"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"    public void readEmployeeTracker_invalidAndValidEmployee_throwDataConversionException() {"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"        assertThrows(DataConversionException.class, () -\u003e"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"                readEmployeeTracker(\"invalidAndValidEmployee.json\"));"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"    public void readAndSaveEmployeeTracker_allInOrder_success() throws Exception {"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"        EmployeeTracker original \u003d getTypicalEmployeeTracker();"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"        JsonEmployeeTrackerStorage jsonEmployeeTrackerStorage \u003d new JsonEmployeeTrackerStorage(filePath);"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"        // Save in new file and read back"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"        jsonEmployeeTrackerStorage.saveEmployeeTracker(original, filePath);"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"        ReadOnlyEmployeeTracker readBack \u003d jsonEmployeeTrackerStorage.readEmployeeTracker(filePath).get();"},{"lineNumber":74,"author":{"gitId":"e0260222"},"content":"        assertEquals(original, new EmployeeTracker(readBack));"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":77,"author":{"gitId":"e0260222"},"content":"        original.addEmployee(HOON);"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"        original.removeEmployee(ALICE);"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"        jsonEmployeeTrackerStorage.saveEmployeeTracker(original, filePath);"},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"        readBack \u003d jsonEmployeeTrackerStorage.readEmployeeTracker(filePath).get();"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"        assertEquals(original, new EmployeeTracker(readBack));"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"        // Save and read without specifying file path"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"        original.addEmployee(IDA);"},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":"        jsonEmployeeTrackerStorage.saveEmployeeTracker(original); // file path not specified"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"        readBack \u003d jsonEmployeeTrackerStorage.readEmployeeTracker().get(); // file path not specified"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":"        assertEquals(original, new EmployeeTracker(readBack));"},{"lineNumber":88,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"    public void saveEmployeeTracker_nullEmployeeTracker_throwsNullPointerException() {"},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveEmployeeTracker(null, \"SomeFile.json\"));"},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"    private void saveEmployeeTracker(ReadOnlyEmployeeTracker addressBook, String filePath) {"},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":"        try {"},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":"            new JsonEmployeeTrackerStorage(Paths.get(filePath))"},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"                    .saveEmployeeTracker(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"        } catch (IOException ioe) {"},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":"    public void saveEmployeeTracker_nullFilePath_throwsNullPointerException() {"},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveEmployeeTracker(new EmployeeTracker(), null));"},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":112}},{"path":"src/test/java/employeetracker/storage/JsonSerializableEmployeeTrackerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.EmployeeTracker;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.testutil.TypicalEmployees;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"public class JsonSerializableEmployeeTrackerTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"    private static final Path TEST_DATA_FOLDER \u003d"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableEmployeeTrackerTest\");"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"    private static final Path TYPICAL_EMPLOYEES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEmployees.json\");"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    private static final Path INVALID_EMPLOYEE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEmployee.json\");"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":"    private static final Path DUPLICATE_EMPLOYEE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEmployee.json\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    public void toModelType_typicalEmployeesFile_success() throws Exception {"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"        JsonSerializableEmployeeTracker dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EMPLOYEES_FILE,"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"                JsonSerializableEmployeeTracker.class).get();"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        EmployeeTracker employeeTrackerFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        EmployeeTracker typicalPersonsEmployeeTracker \u003d TypicalEmployees.getTypicalEmployeeTracker();"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"        assertEquals(employeeTrackerFromFile, typicalPersonsEmployeeTracker);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"    public void toModelType_invalidEmployeeFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"        JsonSerializableEmployeeTracker dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EMPLOYEE_FILE,"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"                JsonSerializableEmployeeTracker.class).get();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"    public void toModelType_duplicateEmployees_throwsIllegalValueException() throws Exception {"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        JsonSerializableEmployeeTracker dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EMPLOYEE_FILE,"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"                JsonSerializableEmployeeTracker.class).get();"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableEmployeeTracker.MESSAGE_DUPLICATE_EMPLOYEE,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":26,"-":22}},{"path":"src/test/java/employeetracker/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"        userPrefs.setEmployeeTrackerFilePath(Paths.get(\"employeetracker.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":6,"-":117}},{"path":"src/test/java/employeetracker/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.TypicalEmployees.getTypicalEmployeeTracker;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.EmployeeTracker;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.ReadOnlyEmployeeTracker;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        JsonEmployeeTrackerStorage addressBookStorage \u003d new JsonEmployeeTrackerStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"    public void employeeTrackerReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"         * {@link JsonEmployeeTrackerStorage} class."},{"lineNumber":55,"author":{"gitId":"e0260222"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonEmployeeTrackerStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        EmployeeTracker original \u003d getTypicalEmployeeTracker();"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"        storageManager.saveEmployeeTracker(original);"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"        ReadOnlyEmployeeTracker retrieved \u003d storageManager.readEmployeeTracker().get();"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"        assertEquals(original, new EmployeeTracker(retrieved));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"    public void getEmployeeTrackerFilePath() {"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"        assertNotNull(storageManager.getEmployeeTrackerFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":16,"-":52}},{"path":"src/test/java/employeetracker/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":33}},{"path":"src/test/java/employeetracker/testutil/EditEmployeeDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.EditCommand;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.EditCommand.EditEmployeeDescriptor;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Address;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfBirth;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfJoining;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Email;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Name;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Phone;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Role;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Salary;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":" * A utility class to help with building EditEmployeeDescriptor objects."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"public class EditEmployeeDescriptorBuilder {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"    private EditCommand.EditEmployeeDescriptor descriptor;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"    public EditEmployeeDescriptorBuilder() {"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        descriptor \u003d new EditEmployeeDescriptor();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    public EditEmployeeDescriptorBuilder(EditEmployeeDescriptor descriptor) {"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"        this.descriptor \u003d new EditEmployeeDescriptor(descriptor);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     * Returns an {@code EditEmployeeDescriptor} with fields containing {@code employee}\u0027s details"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    public EditEmployeeDescriptorBuilder(Employee employee) {"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"        descriptor \u003d new EditCommand.EditEmployeeDescriptor();"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        descriptor.setName(employee.getName());"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"        descriptor.setRole(employee.getRole());"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        descriptor.setPhone(employee.getPhone());"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        descriptor.setEmail(employee.getEmail());"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        descriptor.setAddress(employee.getAddress());"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        descriptor.setDateOfBirth(employee.getDateOfBirth());"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"        descriptor.setDateOfJoining(employee.getDateOfJoining());"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"        descriptor.setSalary(employee.getSalary());"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"        descriptor.setTags(employee.getTags());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code Name} of the {@code EditEmployeeDescriptor} that we are building."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"    public EditEmployeeDescriptorBuilder withName(String name) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code Role} of the {@code EditEmployeeDescriptor} that we are building."},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"    public EditEmployeeDescriptorBuilder withRole(String role) {"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"        descriptor.setRole(new Role(role));"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"        return this;"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code Phone} of the {@code EditEmployeeDescriptor} that we are building."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"    public EditEmployeeDescriptorBuilder withPhone(String phone) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code Email} of the {@code EditEmployeeDescriptor} that we are building."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"e0260222"},"content":"    public EditEmployeeDescriptorBuilder withEmail(String email) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code Address} of the {@code EditEmployeeDescriptor} that we are building."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"    public EditEmployeeDescriptorBuilder withAddress(String address) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code DateOfBirth} of the {@code EditEmployeeDescriptor} that we are building."},{"lineNumber":93,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"e0260222"},"content":"    public EditEmployeeDescriptorBuilder withDateOfBirth(String dateOfBirth) {"},{"lineNumber":95,"author":{"gitId":"e0260222"},"content":"        descriptor.setDateOfBirth(new DateOfBirth(dateOfBirth));"},{"lineNumber":96,"author":{"gitId":"e0260222"},"content":"        return this;"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code DateOfJoining} of the {@code EditEmployeeDescriptor} that we are building."},{"lineNumber":101,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"e0260222"},"content":"    public EditEmployeeDescriptorBuilder withDateOfJoining(String dateOfJoining) {"},{"lineNumber":103,"author":{"gitId":"e0260222"},"content":"        descriptor.setDateOfJoining(new DateOfJoining(dateOfJoining));"},{"lineNumber":104,"author":{"gitId":"e0260222"},"content":"        return this;"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code Salary} of the {@code EditEmployeeDescriptor} that we are building."},{"lineNumber":109,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"e0260222"},"content":"    public EditEmployeeDescriptorBuilder withSalary(String salary) {"},{"lineNumber":111,"author":{"gitId":"e0260222"},"content":"        descriptor.setSalary(new Salary(salary));"},{"lineNumber":112,"author":{"gitId":"e0260222"},"content":"        return this;"},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"e0260222"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditEmployeeDescriptor}"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"e0260222"},"content":"    public EditEmployeeDescriptorBuilder withTags(String... tags) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"    public EditEmployeeDescriptor build() {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":75,"-":53}},{"path":"src/test/java/employeetracker/testutil/EmployeeBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Address;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfBirth;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.DateOfJoining;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Email;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Name;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Phone;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Role;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Salary;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.util.SampleDataUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":" * A utility class to help with building Employee objects."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"public class EmployeeBuilder {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"    public static final String DEFAULT_ROLE \u003d \"Developer\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    public static final String DEFAULT_DATE_OF_BIRTH \u003d \"1990-10-12\";"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    public static final String DEFAULT_DATE_OF_JOINING \u003d \"2020-01-01\";"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"    public static final String DEFAULT_SALARY \u003d \"6000\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"    private Role role;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"    private DateOfBirth dateOfBirth;"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"    private DateOfJoining dateOfJoining;"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"    private Salary salary;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"     * Creates a {@code EmployeeBuilder} with the default details."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"    public EmployeeBuilder() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"        role \u003d new Role(DEFAULT_ROLE);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"        dateOfBirth \u003d new DateOfBirth(DEFAULT_DATE_OF_BIRTH);"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"        dateOfJoining \u003d new DateOfJoining(DEFAULT_DATE_OF_JOINING);"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"        salary \u003d new Salary(DEFAULT_SALARY);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"     * Initializes the EmployeeBuilder with the data of {@code employeeToCopy}."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"    public EmployeeBuilder(Employee employeeToCopy) {"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"        name \u003d employeeToCopy.getName();"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"        role \u003d employeeToCopy.getRole();"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"        phone \u003d employeeToCopy.getPhone();"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"        email \u003d employeeToCopy.getEmail();"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"        address \u003d employeeToCopy.getAddress();"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"        dateOfBirth \u003d employeeToCopy.getDateOfBirth();"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"        dateOfJoining \u003d employeeToCopy.getDateOfJoining();"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"        salary \u003d employeeToCopy.getSalary();"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"        tags \u003d new HashSet\u003c\u003e(employeeToCopy.getTags());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code Name} of the {@code Employee} that we are building."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"e0260222"},"content":"    public EmployeeBuilder withName(String name) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code Role} of the {@code Employee} that we are building."},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"    public EmployeeBuilder withRole(String role) {"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"        this.role \u003d new Role(role);"},{"lineNumber":85,"author":{"gitId":"e0260222"},"content":"        return this;"},{"lineNumber":86,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Employee} that we are building."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"e0260222"},"content":"    public EmployeeBuilder withTags(String ... tags) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code Address} of the {@code Employee} that we are building."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"e0260222"},"content":"    public EmployeeBuilder withAddress(String address) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code Phone} of the {@code Employee} that we are building."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"e0260222"},"content":"    public EmployeeBuilder withPhone(String phone) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code Email} of the {@code Employee} that we are building."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"e0260222"},"content":"    public EmployeeBuilder withEmail(String email) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code DateOfBirth} of the {@code Employee} that we are building."},{"lineNumber":122,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"e0260222"},"content":"    public EmployeeBuilder withDateOfBirth(String dateOfBirth) {"},{"lineNumber":124,"author":{"gitId":"e0260222"},"content":"        this.dateOfBirth \u003d new DateOfBirth(dateOfBirth);"},{"lineNumber":125,"author":{"gitId":"e0260222"},"content":"        return this;"},{"lineNumber":126,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":128,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code DateOfJoining} of the {@code Employee} that we are building."},{"lineNumber":130,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"e0260222"},"content":"    public EmployeeBuilder withDateOfJoining(String dateOfJoining) {"},{"lineNumber":132,"author":{"gitId":"e0260222"},"content":"        this.dateOfJoining \u003d new DateOfJoining(dateOfJoining);"},{"lineNumber":133,"author":{"gitId":"e0260222"},"content":"        return this;"},{"lineNumber":134,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":136,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"e0260222"},"content":"     * Sets the {@code Salary} of the {@code Employee} that we are building."},{"lineNumber":138,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"e0260222"},"content":"    public EmployeeBuilder withSalary(String salary) {"},{"lineNumber":140,"author":{"gitId":"e0260222"},"content":"        this.salary \u003d new Salary(salary);"},{"lineNumber":141,"author":{"gitId":"e0260222"},"content":"        return this;"},{"lineNumber":142,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":144,"author":{"gitId":"e0260222"},"content":"    public Employee build() {"},{"lineNumber":145,"author":{"gitId":"e0260222"},"content":"        return new Employee(name, role, phone, email, address, dateOfBirth, dateOfJoining, salary, tags);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":83,"-":65}},{"path":"src/test/java/employeetracker/testutil/EmployeeTrackerBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.testutil;"},{"lineNumber":2,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.EmployeeTracker;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":" * A utility class to help with building EmployeeTracker objects."},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":" *     {@code EmployeeTracker ab \u003d new EmployeeTrackerBuilder().withEmployee(\"John\", \"Doe\").build();}"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":" */"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"public class EmployeeTrackerBuilder {"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"    private EmployeeTracker employeeTracker;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"    public EmployeeTrackerBuilder() {"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"        employeeTracker \u003d new EmployeeTracker();"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":"    public EmployeeTrackerBuilder(EmployeeTracker employeeTracker) {"},{"lineNumber":20,"author":{"gitId":"e0260222"},"content":"        this.employeeTracker \u003d employeeTracker;"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"     * Adds a new {@code Employee} to the {@code EmployeeTracker} that we are building."},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"    public EmployeeTrackerBuilder withEmployee(Employee employee) {"},{"lineNumber":27,"author":{"gitId":"e0260222"},"content":"        employeeTracker.addEmployee(employee);"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"        return this;"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":31,"author":{"gitId":"e0260222"},"content":"    public EmployeeTracker build() {"},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"        return employeeTracker;"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"}"}],"authorContributionMap":{"e0260222":34}},{"path":"src/test/java/employeetracker/testutil/EmployeeUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_DATE_OF_BIRTH;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_DATE_OF_JOINING;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_SALARY;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import employeetracker.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"e0260222"},"content":" * A utility class for Employee."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"e0260222"},"content":"public class EmployeeUtil {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"e0260222"},"content":"     * Returns an add command string for adding the {@code employee}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":"    public static String getAddCommand(Employee employee) {"},{"lineNumber":29,"author":{"gitId":"e0260222"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getEmployeeDetails(employee);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"     * Returns the part of command string for the given {@code employee}\u0027s details."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"e0260222"},"content":"    public static String getEmployeeDetails(Employee employee) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"        sb.append(PREFIX_NAME + employee.getName().fullName + \" \");"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"        sb.append(PREFIX_ROLE + employee.getRole().value + \" \");"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"        sb.append(PREFIX_PHONE + employee.getPhone().value + \" \");"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"        sb.append(PREFIX_EMAIL + employee.getEmail().value + \" \");"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"        sb.append(PREFIX_ADDRESS + employee.getAddress().value + \" \");"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"        sb.append(PREFIX_DATE_OF_BIRTH + employee.getDateOfBirth().value + \" \");"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"        sb.append(PREFIX_DATE_OF_JOINING + employee.getDateOfJoining().value + \" \");"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"        sb.append(PREFIX_SALARY + employee.getSalary().value + \" \");"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"        employee.getTags().stream().forEach("},{"lineNumber":46,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"     * Returns the part of command string for the given {@code EditEmployeeDescriptor}\u0027s details."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"    public static String getEditEmployeeDescriptorDetails(EditCommand.EditEmployeeDescriptor descriptor) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"        descriptor.getRole().ifPresent(role -\u003e sb.append(PREFIX_ROLE).append(role.value).append(\" \"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"        descriptor.getDateOfBirth().ifPresent(dateOfBirth -\u003e"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"                sb.append(PREFIX_DATE_OF_BIRTH).append(dateOfBirth.value).append(\" \"));"},{"lineNumber":63,"author":{"gitId":"e0260222"},"content":"        descriptor.getDateOfJoining().ifPresent(dateOfJoining -\u003e"},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"                sb.append(PREFIX_DATE_OF_JOINING).append(dateOfJoining.value).append(\" \"));"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"        descriptor.getSalary().ifPresent(salary -\u003e sb.append(PREFIX_SALARY).append(salary.value).append(\" \"));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":38,"-":38}},{"path":"src/test/java/employeetracker/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \""},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":71}},{"path":"src/test/java/employeetracker/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.Model;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"     * Returns the middle index of the employee in the {@code model}\u0027s employee list."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":39,"author":{"gitId":"e0260222"},"content":"        return Index.fromOneBased(model.getFilteredEmployeeList().size() / 2);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"     * Returns the last index of the employee in the {@code model}\u0027s employee list."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"        return Index.fromOneBased(model.getFilteredEmployeeList().size());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"     * Returns the employee in the {@code model}\u0027s employee list at {@code index}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"    public static Employee getEmployee(Model model, Index index) {"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"        return model.getFilteredEmployeeList().get(index.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":11,"-":44}},{"path":"src/test/java/employeetracker/testutil/TypicalEmployees.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_DATE_OF_BIRTH_AMY;"},{"lineNumber":6,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_DATE_OF_BIRTH_BOB;"},{"lineNumber":7,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_DATE_OF_JOINING_AMY;"},{"lineNumber":8,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_DATE_OF_JOINING_BOB;"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":12,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":14,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":15,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_ROLE_AMY;"},{"lineNumber":16,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"},{"lineNumber":17,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":18,"author":{"gitId":"e0260222"},"content":"import static employeetracker.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":19,"author":{"gitId":"e0260222"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.EmployeeTracker;"},{"lineNumber":25,"author":{"gitId":"e0260222"},"content":"import employeetracker.model.employee.Employee;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"e0260222"},"content":" * A utility class containing a list of {@code Employee} objects to be used in tests."},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"e0260222"},"content":"public class TypicalEmployees {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"e0260222"},"content":"    public static final Employee ALICE \u003d new EmployeeBuilder().withName(\"Alice Pauline\").withRole(\"Finance Manager\")"},{"lineNumber":33,"author":{"gitId":"e0260222"},"content":"            .withPhone(\"94351253\").withEmail(\"alice@example.com\").withAddress(\"123, Jurong West Ave 6, #08-111\")"},{"lineNumber":34,"author":{"gitId":"e0260222"},"content":"            .withDateOfBirth(\"1988-09-14\").withDateOfJoining(\"2020-02-01\").withSalary(\"6000\")"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":36,"author":{"gitId":"e0260222"},"content":"    public static final Employee BENSON \u003d new EmployeeBuilder().withName(\"Benson Meier\").withRole(\"Project Manager\")"},{"lineNumber":37,"author":{"gitId":"e0260222"},"content":"            .withPhone(\"98765432\").withEmail(\"johnd@example.com\").withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":38,"author":{"gitId":"e0260222"},"content":"            .withDateOfBirth(\"1989-11-14\").withDateOfJoining(\"2020-02-01\").withSalary(\"6000\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":40,"author":{"gitId":"e0260222"},"content":"    public static final Employee CARL \u003d new EmployeeBuilder().withName(\"Carl Kurz\").withRole(\"System Analyst\")"},{"lineNumber":41,"author":{"gitId":"e0260222"},"content":"            .withPhone(\"95352563\").withEmail(\"heinz@example.com\").withAddress(\"wall street\").withSalary(\"6000\")"},{"lineNumber":42,"author":{"gitId":"e0260222"},"content":"            .withDateOfBirth(\"1979-09-01\").withDateOfJoining(\"2020-02-01\").build();"},{"lineNumber":43,"author":{"gitId":"e0260222"},"content":"    public static final Employee DANIEL \u003d new EmployeeBuilder().withName(\"Daniel Meier\").withRole(\"Account Manager\")"},{"lineNumber":44,"author":{"gitId":"e0260222"},"content":"            .withPhone(\"87652533\").withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withSalary(\"6000\")"},{"lineNumber":45,"author":{"gitId":"e0260222"},"content":"            .withDateOfBirth(\"1977-01-05\").withDateOfJoining(\"2021-02-01\").withTags(\"friends\").build();"},{"lineNumber":46,"author":{"gitId":"e0260222"},"content":"    public static final Employee ELLE \u003d new EmployeeBuilder().withName(\"Elle Meyer\").withRole(\"Developer\")"},{"lineNumber":47,"author":{"gitId":"e0260222"},"content":"            .withPhone(\"9482224\").withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withSalary(\"5000\")"},{"lineNumber":48,"author":{"gitId":"e0260222"},"content":"            .withDateOfBirth(\"2001-04-11\").withDateOfJoining(\"2021-02-01\").build();"},{"lineNumber":49,"author":{"gitId":"e0260222"},"content":"    public static final Employee FIONA \u003d new EmployeeBuilder().withName(\"Fiona Kunz\").withRole(\"Developer\")"},{"lineNumber":50,"author":{"gitId":"e0260222"},"content":"            .withPhone(\"9482427\").withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withSalary(\"5000\")"},{"lineNumber":51,"author":{"gitId":"e0260222"},"content":"            .withDateOfBirth(\"2000-08-29\").withDateOfJoining(\"2021-02-01\").build();"},{"lineNumber":52,"author":{"gitId":"e0260222"},"content":"    public static final Employee GEORGE \u003d new EmployeeBuilder().withName(\"George Best\").withRole(\"Developer\")"},{"lineNumber":53,"author":{"gitId":"e0260222"},"content":"            .withPhone(\"9482442\").withEmail(\"anna@example.com\").withAddress(\"4th street\").withSalary(\"5000\")"},{"lineNumber":54,"author":{"gitId":"e0260222"},"content":"            .withDateOfBirth(\"1981-03-16\").withDateOfJoining(\"2020-03-01\").build();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":57,"author":{"gitId":"e0260222"},"content":"    public static final Employee HOON \u003d new EmployeeBuilder().withName(\"Hoon Meier\").withRole(\"Developer\")"},{"lineNumber":58,"author":{"gitId":"e0260222"},"content":"            .withPhone(\"8482424\").withEmail(\"stefan@example.com\").withAddress(\"little india\").withSalary(\"6000\")"},{"lineNumber":59,"author":{"gitId":"e0260222"},"content":"            .withDateOfBirth(\"2002-01-01\").withDateOfJoining(\"2020-02-01\").build();"},{"lineNumber":60,"author":{"gitId":"e0260222"},"content":"    public static final Employee IDA \u003d new EmployeeBuilder().withName(\"Ida Mueller\").withRole(\"Project Manager\")"},{"lineNumber":61,"author":{"gitId":"e0260222"},"content":"            .withPhone(\"8482131\").withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withSalary(\"6000\")"},{"lineNumber":62,"author":{"gitId":"e0260222"},"content":"            .withDateOfBirth(\"1974-03-09\").withDateOfJoining(\"2020-02-01\").build();"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"e0260222"},"content":"    // Manually added - Employee\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":65,"author":{"gitId":"e0260222"},"content":"    public static final Employee AMY \u003d new EmployeeBuilder().withName(VALID_NAME_AMY).withRole(VALID_ROLE_AMY)"},{"lineNumber":66,"author":{"gitId":"e0260222"},"content":"            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":67,"author":{"gitId":"e0260222"},"content":"            .withDateOfBirth(VALID_DATE_OF_BIRTH_AMY).withDateOfJoining(VALID_DATE_OF_JOINING_AMY)"},{"lineNumber":68,"author":{"gitId":"e0260222"},"content":"            .withSalary(\"6000\").withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":69,"author":{"gitId":"e0260222"},"content":"    public static final Employee BOB \u003d new EmployeeBuilder().withName(VALID_NAME_BOB).withRole(VALID_ROLE_BOB)"},{"lineNumber":70,"author":{"gitId":"e0260222"},"content":"            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":71,"author":{"gitId":"e0260222"},"content":"            .withDateOfBirth(VALID_DATE_OF_BIRTH_BOB).withDateOfJoining(VALID_DATE_OF_JOINING_BOB)"},{"lineNumber":72,"author":{"gitId":"e0260222"},"content":"            .withSalary(\"6500\").withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"e0260222"},"content":"    private TypicalEmployees() {} // prevents instantiation"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"e0260222"},"content":"     * Returns an {@code EmployeeTracker} with all the typical persons."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"e0260222"},"content":"    public static EmployeeTracker getTypicalEmployeeTracker() {"},{"lineNumber":82,"author":{"gitId":"e0260222"},"content":"        EmployeeTracker ab \u003d new EmployeeTracker();"},{"lineNumber":83,"author":{"gitId":"e0260222"},"content":"        for (Employee employee : getTypicalEmployees()) {"},{"lineNumber":84,"author":{"gitId":"e0260222"},"content":"            ab.addEmployee(employee);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"e0260222"},"content":"    public static List\u003cEmployee\u003e getTypicalEmployees() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":65,"-":27}},{"path":"src/test/java/employeetracker/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import employeetracker.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitId":"e0260222"},"content":"    public static final Index INDEX_FIRST_EMPLOYEE \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitId":"e0260222"},"content":"    public static final Index INDEX_SECOND_EMPLOYEE \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitId":"e0260222"},"content":"    public static final Index INDEX_THIRD_EMPLOYEE \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":5,"-":7}},{"path":"src/test/java/employeetracker/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file."},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":1,"-":34}},{"path":"src/test/java/employeetracker/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"e0260222"},"content":"package employeetracker.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"import static employeetracker.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"e0260222"},"content":"import employeetracker.MainApp;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"e0260222":3,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"\u003c?import employeetracker.ui.TestFxmlObject?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"}],"authorContributionMap":{"e0260222":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"e0260222"},"content":"\u003cfx:root type\u003d\"employeetracker.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"e0260222":1,"-":5}}]
